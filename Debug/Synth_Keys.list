
Synth_Keys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002240  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002338  08002338  00012338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800233c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a4  20000010  0800234c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000b4  0800234c  000200b4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007b22  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000011a5  00000000  00000000  00027b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000620  00000000  00000000  00028d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  00029320  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003710  00000000  00000000  000298c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001ea4  00000000  00000000  0002cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002ee7c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000147c  00000000  00000000  0002eef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080022e4 	.word	0x080022e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	080022e4 	.word	0x080022e4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fb2e 	bl	8000880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f882 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f91e 	bl	8000468 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800022c:	f000 f8ec 	bl	8000408 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  switch(currentKey)
 8000230:	4b3d      	ldr	r3, [pc, #244]	; (8000328 <main+0x10c>)
 8000232:	881b      	ldrh	r3, [r3, #0]
 8000234:	2b80      	cmp	r3, #128	; 0x80
 8000236:	d100      	bne.n	800023a <main+0x1e>
 8000238:	e05d      	b.n	80002f6 <main+0xda>
 800023a:	dc0a      	bgt.n	8000252 <main+0x36>
 800023c:	2b10      	cmp	r3, #16
 800023e:	d03a      	beq.n	80002b6 <main+0x9a>
 8000240:	dc02      	bgt.n	8000248 <main+0x2c>
 8000242:	2b08      	cmp	r3, #8
 8000244:	d027      	beq.n	8000296 <main+0x7a>
 8000246:	e7f3      	b.n	8000230 <main+0x14>
 8000248:	2b20      	cmp	r3, #32
 800024a:	d02c      	beq.n	80002a6 <main+0x8a>
 800024c:	2b40      	cmp	r3, #64	; 0x40
 800024e:	d05a      	beq.n	8000306 <main+0xea>
 8000250:	e7ee      	b.n	8000230 <main+0x14>
 8000252:	2280      	movs	r2, #128	; 0x80
 8000254:	00d2      	lsls	r2, r2, #3
 8000256:	4293      	cmp	r3, r2
 8000258:	d015      	beq.n	8000286 <main+0x6a>
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	00d2      	lsls	r2, r2, #3
 800025e:	4293      	cmp	r3, r2
 8000260:	dc08      	bgt.n	8000274 <main+0x58>
 8000262:	2280      	movs	r2, #128	; 0x80
 8000264:	0052      	lsls	r2, r2, #1
 8000266:	4293      	cmp	r3, r2
 8000268:	d035      	beq.n	80002d6 <main+0xba>
 800026a:	2280      	movs	r2, #128	; 0x80
 800026c:	0092      	lsls	r2, r2, #2
 800026e:	4293      	cmp	r3, r2
 8000270:	d039      	beq.n	80002e6 <main+0xca>
 8000272:	e7dd      	b.n	8000230 <main+0x14>
 8000274:	2280      	movs	r2, #128	; 0x80
 8000276:	0112      	lsls	r2, r2, #4
 8000278:	4293      	cmp	r3, r2
 800027a:	d024      	beq.n	80002c6 <main+0xaa>
 800027c:	2280      	movs	r2, #128	; 0x80
 800027e:	0152      	lsls	r2, r2, #5
 8000280:	4293      	cmp	r3, r2
 8000282:	d048      	beq.n	8000316 <main+0xfa>
 8000284:	e7d4      	b.n	8000230 <main+0x14>
	  {
	  	  case C2_01_Pin:
	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000286:	2390      	movs	r3, #144	; 0x90
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	2201      	movs	r2, #1
 800028c:	2120      	movs	r1, #32
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fdb2 	bl	8000df8 <HAL_GPIO_WritePin>
	  		  break;
 8000294:	e047      	b.n	8000326 <main+0x10a>
	  	  case C2_02_Pin:
	  		  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000296:	2390      	movs	r3, #144	; 0x90
 8000298:	05db      	lsls	r3, r3, #23
 800029a:	2201      	movs	r2, #1
 800029c:	2120      	movs	r1, #32
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fdaa 	bl	8000df8 <HAL_GPIO_WritePin>
	  		  		  break;
 80002a4:	e03f      	b.n	8000326 <main+0x10a>
	  	  case C2_03_Pin:
	  		  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80002a6:	2390      	movs	r3, #144	; 0x90
 80002a8:	05db      	lsls	r3, r3, #23
 80002aa:	2201      	movs	r2, #1
 80002ac:	2120      	movs	r1, #32
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fda2 	bl	8000df8 <HAL_GPIO_WritePin>
	  		  		  break;
 80002b4:	e037      	b.n	8000326 <main+0x10a>
	  	  case C2_04_Pin:
	  		  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80002b6:	2390      	movs	r3, #144	; 0x90
 80002b8:	05db      	lsls	r3, r3, #23
 80002ba:	2201      	movs	r2, #1
 80002bc:	2120      	movs	r1, #32
 80002be:	0018      	movs	r0, r3
 80002c0:	f000 fd9a 	bl	8000df8 <HAL_GPIO_WritePin>
	  		  		  break;
 80002c4:	e02f      	b.n	8000326 <main+0x10a>
	  	  case C2_05_Pin:
	  		  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80002c6:	2390      	movs	r3, #144	; 0x90
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	2201      	movs	r2, #1
 80002cc:	2120      	movs	r1, #32
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 fd92 	bl	8000df8 <HAL_GPIO_WritePin>
	  		  		  break;
 80002d4:	e027      	b.n	8000326 <main+0x10a>
	  	  case C2_06_Pin:
	  		  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	2201      	movs	r2, #1
 80002dc:	2120      	movs	r1, #32
 80002de:	0018      	movs	r0, r3
 80002e0:	f000 fd8a 	bl	8000df8 <HAL_GPIO_WritePin>
	  		  		  break;
 80002e4:	e01f      	b.n	8000326 <main+0x10a>
	  	  case C2_07_Pin:
	  		  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80002e6:	2390      	movs	r3, #144	; 0x90
 80002e8:	05db      	lsls	r3, r3, #23
 80002ea:	2201      	movs	r2, #1
 80002ec:	2120      	movs	r1, #32
 80002ee:	0018      	movs	r0, r3
 80002f0:	f000 fd82 	bl	8000df8 <HAL_GPIO_WritePin>
	  		  		  break;
 80002f4:	e017      	b.n	8000326 <main+0x10a>
	  	  case C2_08_Pin:
	  		  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80002f6:	2390      	movs	r3, #144	; 0x90
 80002f8:	05db      	lsls	r3, r3, #23
 80002fa:	2201      	movs	r2, #1
 80002fc:	2120      	movs	r1, #32
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fd7a 	bl	8000df8 <HAL_GPIO_WritePin>
	  		  		  break;
 8000304:	e00f      	b.n	8000326 <main+0x10a>
	  	  case C2_09_Pin:
	  		  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000306:	2390      	movs	r3, #144	; 0x90
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	2201      	movs	r2, #1
 800030c:	2120      	movs	r1, #32
 800030e:	0018      	movs	r0, r3
 8000310:	f000 fd72 	bl	8000df8 <HAL_GPIO_WritePin>
	  		  		  break;
 8000314:	e007      	b.n	8000326 <main+0x10a>
	  	  case C2_10_Pin:
	  		  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000316:	2390      	movs	r3, #144	; 0x90
 8000318:	05db      	lsls	r3, r3, #23
 800031a:	2201      	movs	r2, #1
 800031c:	2120      	movs	r1, #32
 800031e:	0018      	movs	r0, r3
 8000320:	f000 fd6a 	bl	8000df8 <HAL_GPIO_WritePin>
	  		  		  break;
 8000324:	46c0      	nop			; (mov r8, r8)
	  switch(currentKey)
 8000326:	e783      	b.n	8000230 <main+0x14>
 8000328:	20000000 	.word	0x20000000

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b098      	sub	sp, #96	; 0x60
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	232c      	movs	r3, #44	; 0x2c
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	0018      	movs	r0, r3
 8000338:	2334      	movs	r3, #52	; 0x34
 800033a:	001a      	movs	r2, r3
 800033c:	2100      	movs	r1, #0
 800033e:	f001 ffc9 	bl	80022d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000342:	231c      	movs	r3, #28
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	0018      	movs	r0, r3
 8000348:	2310      	movs	r3, #16
 800034a:	001a      	movs	r2, r3
 800034c:	2100      	movs	r1, #0
 800034e:	f001 ffc1 	bl	80022d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000352:	003b      	movs	r3, r7
 8000354:	0018      	movs	r0, r3
 8000356:	231c      	movs	r3, #28
 8000358:	001a      	movs	r2, r3
 800035a:	2100      	movs	r1, #0
 800035c:	f001 ffba 	bl	80022d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000360:	232c      	movs	r3, #44	; 0x2c
 8000362:	18fb      	adds	r3, r7, r3
 8000364:	2202      	movs	r2, #2
 8000366:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000368:	232c      	movs	r3, #44	; 0x2c
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	2201      	movs	r2, #1
 800036e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000370:	232c      	movs	r3, #44	; 0x2c
 8000372:	18fb      	adds	r3, r7, r3
 8000374:	2210      	movs	r2, #16
 8000376:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	232c      	movs	r3, #44	; 0x2c
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	2202      	movs	r2, #2
 800037e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000380:	232c      	movs	r3, #44	; 0x2c
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	2280      	movs	r2, #128	; 0x80
 8000386:	0212      	lsls	r2, r2, #8
 8000388:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800038a:	232c      	movs	r3, #44	; 0x2c
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	22a0      	movs	r2, #160	; 0xa0
 8000390:	0392      	lsls	r2, r2, #14
 8000392:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000394:	232c      	movs	r3, #44	; 0x2c
 8000396:	18fb      	adds	r3, r7, r3
 8000398:	2201      	movs	r2, #1
 800039a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	232c      	movs	r3, #44	; 0x2c
 800039e:	18fb      	adds	r3, r7, r3
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 fd63 	bl	8000e6c <HAL_RCC_OscConfig>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003aa:	f000 f99b 	bl	80006e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ae:	231c      	movs	r3, #28
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	2207      	movs	r2, #7
 80003b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b6:	231c      	movs	r3, #28
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	2202      	movs	r2, #2
 80003bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003be:	231c      	movs	r3, #28
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c6:	231c      	movs	r3, #28
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ce:	231c      	movs	r3, #28
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	2101      	movs	r1, #1
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 f8cd 	bl	8001574 <HAL_RCC_ClockConfig>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80003de:	f000 f981 	bl	80006e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003e2:	003b      	movs	r3, r7
 80003e4:	2202      	movs	r2, #2
 80003e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003e8:	003b      	movs	r3, r7
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ee:	003b      	movs	r3, r7
 80003f0:	0018      	movs	r0, r3
 80003f2:	f001 fa37 	bl	8001864 <HAL_RCCEx_PeriphCLKConfig>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80003fa:	f000 f973 	bl	80006e4 <Error_Handler>
  }
}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b018      	add	sp, #96	; 0x60
 8000404:	bd80      	pop	{r7, pc}
	...

08000408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <MX_USART2_UART_Init+0x58>)
 800040e:	4a15      	ldr	r2, [pc, #84]	; (8000464 <MX_USART2_UART_Init+0x5c>)
 8000410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000412:	4b13      	ldr	r3, [pc, #76]	; (8000460 <MX_USART2_UART_Init+0x58>)
 8000414:	22e1      	movs	r2, #225	; 0xe1
 8000416:	0252      	lsls	r2, r2, #9
 8000418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <MX_USART2_UART_Init+0x58>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <MX_USART2_UART_Init+0x58>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <MX_USART2_UART_Init+0x58>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <MX_USART2_UART_Init+0x58>)
 800042e:	220c      	movs	r2, #12
 8000430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000432:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <MX_USART2_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800043e:	4b08      	ldr	r3, [pc, #32]	; (8000460 <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <MX_USART2_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800044a:	4b05      	ldr	r3, [pc, #20]	; (8000460 <MX_USART2_UART_Init+0x58>)
 800044c:	0018      	movs	r0, r3
 800044e:	f001 fb07 	bl	8001a60 <HAL_UART_Init>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000456:	f000 f945 	bl	80006e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	2000002c 	.word	0x2000002c
 8000464:	40004400 	.word	0x40004400

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08a      	sub	sp, #40	; 0x28
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	2314      	movs	r3, #20
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	0018      	movs	r0, r3
 8000474:	2314      	movs	r3, #20
 8000476:	001a      	movs	r2, r3
 8000478:	2100      	movs	r1, #0
 800047a:	f001 ff2b 	bl	80022d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4b8a      	ldr	r3, [pc, #552]	; (80006a8 <MX_GPIO_Init+0x240>)
 8000480:	4a89      	ldr	r2, [pc, #548]	; (80006a8 <MX_GPIO_Init+0x240>)
 8000482:	6952      	ldr	r2, [r2, #20]
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	0309      	lsls	r1, r1, #12
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	4b86      	ldr	r3, [pc, #536]	; (80006a8 <MX_GPIO_Init+0x240>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	031b      	lsls	r3, r3, #12
 8000494:	4013      	ands	r3, r2
 8000496:	613b      	str	r3, [r7, #16]
 8000498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800049a:	4b83      	ldr	r3, [pc, #524]	; (80006a8 <MX_GPIO_Init+0x240>)
 800049c:	4a82      	ldr	r2, [pc, #520]	; (80006a8 <MX_GPIO_Init+0x240>)
 800049e:	6952      	ldr	r2, [r2, #20]
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	03c9      	lsls	r1, r1, #15
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	4b7f      	ldr	r3, [pc, #508]	; (80006a8 <MX_GPIO_Init+0x240>)
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	2380      	movs	r3, #128	; 0x80
 80004ae:	03db      	lsls	r3, r3, #15
 80004b0:	4013      	ands	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b7c      	ldr	r3, [pc, #496]	; (80006a8 <MX_GPIO_Init+0x240>)
 80004b8:	4a7b      	ldr	r2, [pc, #492]	; (80006a8 <MX_GPIO_Init+0x240>)
 80004ba:	6952      	ldr	r2, [r2, #20]
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	0289      	lsls	r1, r1, #10
 80004c0:	430a      	orrs	r2, r1
 80004c2:	615a      	str	r2, [r3, #20]
 80004c4:	4b78      	ldr	r3, [pc, #480]	; (80006a8 <MX_GPIO_Init+0x240>)
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	029b      	lsls	r3, r3, #10
 80004cc:	4013      	ands	r3, r2
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b75      	ldr	r3, [pc, #468]	; (80006a8 <MX_GPIO_Init+0x240>)
 80004d4:	4a74      	ldr	r2, [pc, #464]	; (80006a8 <MX_GPIO_Init+0x240>)
 80004d6:	6952      	ldr	r2, [r2, #20]
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	02c9      	lsls	r1, r1, #11
 80004dc:	430a      	orrs	r2, r1
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	4b71      	ldr	r3, [pc, #452]	; (80006a8 <MX_GPIO_Init+0x240>)
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	02db      	lsls	r3, r3, #11
 80004e8:	4013      	ands	r3, r2
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, C1_5_Pin|C1_4_Pin|C1_1_Pin, GPIO_PIN_RESET);
 80004ee:	496f      	ldr	r1, [pc, #444]	; (80006ac <MX_GPIO_Init+0x244>)
 80004f0:	4b6f      	ldr	r3, [pc, #444]	; (80006b0 <MX_GPIO_Init+0x248>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 fc7f 	bl	8000df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, C1_3_Pin|C1_2_Pin, GPIO_PIN_RESET);
 80004fa:	4b6e      	ldr	r3, [pc, #440]	; (80006b4 <MX_GPIO_Init+0x24c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	2103      	movs	r1, #3
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fc79 	bl	8000df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|C1_7_Pin, GPIO_PIN_RESET);
 8000506:	496c      	ldr	r1, [pc, #432]	; (80006b8 <MX_GPIO_Init+0x250>)
 8000508:	2390      	movs	r3, #144	; 0x90
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2200      	movs	r2, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fc72 	bl	8000df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C1_6_GPIO_Port, C1_6_Pin, GPIO_PIN_RESET);
 8000514:	4b69      	ldr	r3, [pc, #420]	; (80006bc <MX_GPIO_Init+0x254>)
 8000516:	2200      	movs	r2, #0
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fc6c 	bl	8000df8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000520:	2314      	movs	r3, #20
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	0192      	lsls	r2, r2, #6
 8000528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800052a:	2314      	movs	r3, #20
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	2284      	movs	r2, #132	; 0x84
 8000530:	0392      	lsls	r2, r2, #14
 8000532:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2314      	movs	r3, #20
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800053c:	2314      	movs	r3, #20
 800053e:	18fb      	adds	r3, r7, r3
 8000540:	4a5b      	ldr	r2, [pc, #364]	; (80006b0 <MX_GPIO_Init+0x248>)
 8000542:	0019      	movs	r1, r3
 8000544:	0010      	movs	r0, r2
 8000546:	f000 fadf 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_5_Pin C1_4_Pin C1_1_Pin */
  GPIO_InitStruct.Pin = C1_5_Pin|C1_4_Pin|C1_1_Pin;
 800054a:	2314      	movs	r3, #20
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	4a57      	ldr	r2, [pc, #348]	; (80006ac <MX_GPIO_Init+0x244>)
 8000550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2314      	movs	r3, #20
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	2201      	movs	r2, #1
 8000558:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2314      	movs	r3, #20
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2314      	movs	r3, #20
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056a:	2314      	movs	r3, #20
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	4a50      	ldr	r2, [pc, #320]	; (80006b0 <MX_GPIO_Init+0x248>)
 8000570:	0019      	movs	r1, r3
 8000572:	0010      	movs	r0, r2
 8000574:	f000 fac8 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_3_Pin C1_2_Pin */
  GPIO_InitStruct.Pin = C1_3_Pin|C1_2_Pin;
 8000578:	2314      	movs	r3, #20
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	2203      	movs	r2, #3
 800057e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2314      	movs	r3, #20
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	2201      	movs	r2, #1
 8000586:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2314      	movs	r3, #20
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2314      	movs	r3, #20
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000598:	2314      	movs	r3, #20
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	4a45      	ldr	r2, [pc, #276]	; (80006b4 <MX_GPIO_Init+0x24c>)
 800059e:	0019      	movs	r1, r3
 80005a0:	0010      	movs	r0, r2
 80005a2:	f000 fab1 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin C1_7_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|C1_7_Pin;
 80005a6:	2314      	movs	r3, #20
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	4a43      	ldr	r2, [pc, #268]	; (80006b8 <MX_GPIO_Init+0x250>)
 80005ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2314      	movs	r3, #20
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	2201      	movs	r2, #1
 80005b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2314      	movs	r3, #20
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2314      	movs	r3, #20
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	2314      	movs	r3, #20
 80005c8:	18fa      	adds	r2, r7, r3
 80005ca:	2390      	movs	r3, #144	; 0x90
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	0011      	movs	r1, r2
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fa99 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_05_Pin C2_02_Pin C2_04_Pin C2_03_Pin
                           C2_09_Pin */
  GPIO_InitStruct.Pin = C2_05_Pin|C2_02_Pin|C2_04_Pin|C2_03_Pin
 80005d6:	2314      	movs	r3, #20
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	4a39      	ldr	r2, [pc, #228]	; (80006c0 <MX_GPIO_Init+0x258>)
 80005dc:	601a      	str	r2, [r3, #0]
                          |C2_09_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005de:	2314      	movs	r3, #20
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	2288      	movs	r2, #136	; 0x88
 80005e4:	0352      	lsls	r2, r2, #13
 80005e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005e8:	2314      	movs	r3, #20
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	2202      	movs	r2, #2
 80005ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f0:	2314      	movs	r3, #20
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	4a31      	ldr	r2, [pc, #196]	; (80006bc <MX_GPIO_Init+0x254>)
 80005f6:	0019      	movs	r1, r3
 80005f8:	0010      	movs	r0, r2
 80005fa:	f000 fa85 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : C2_08_Pin */
  GPIO_InitStruct.Pin = C2_08_Pin;
 80005fe:	2314      	movs	r3, #20
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000606:	2314      	movs	r3, #20
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	2288      	movs	r2, #136	; 0x88
 800060c:	0352      	lsls	r2, r2, #13
 800060e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000610:	2314      	movs	r3, #20
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	2202      	movs	r2, #2
 8000616:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(C2_08_GPIO_Port, &GPIO_InitStruct);
 8000618:	2314      	movs	r3, #20
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <MX_GPIO_Init+0x248>)
 800061e:	0019      	movs	r1, r3
 8000620:	0010      	movs	r0, r2
 8000622:	f000 fa71 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : C2_06_Pin C2_07_Pin C2_01_Pin C2_10_Pin */
  GPIO_InitStruct.Pin = C2_06_Pin|C2_07_Pin|C2_01_Pin|C2_10_Pin;
 8000626:	2314      	movs	r3, #20
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	22b8      	movs	r2, #184	; 0xb8
 800062c:	0152      	lsls	r2, r2, #5
 800062e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000630:	2314      	movs	r3, #20
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	2288      	movs	r2, #136	; 0x88
 8000636:	0352      	lsls	r2, r2, #13
 8000638:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800063a:	2314      	movs	r3, #20
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	2202      	movs	r2, #2
 8000640:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	2314      	movs	r3, #20
 8000644:	18fa      	adds	r2, r7, r3
 8000646:	2390      	movs	r3, #144	; 0x90
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	0011      	movs	r1, r2
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fa5b 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : C1_6_Pin */
  GPIO_InitStruct.Pin = C1_6_Pin;
 8000652:	2314      	movs	r3, #20
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2314      	movs	r3, #20
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	2201      	movs	r2, #1
 8000660:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2314      	movs	r3, #20
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2314      	movs	r3, #20
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(C1_6_GPIO_Port, &GPIO_InitStruct);
 8000672:	2314      	movs	r3, #20
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <MX_GPIO_Init+0x254>)
 8000678:	0019      	movs	r1, r3
 800067a:	0010      	movs	r0, r2
 800067c:	f000 fa44 	bl	8000b08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2006      	movs	r0, #6
 8000686:	f000 fa0b 	bl	8000aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800068a:	2006      	movs	r0, #6
 800068c:	f000 fa1e 	bl	8000acc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	2007      	movs	r0, #7
 8000696:	f000 fa03 	bl	8000aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800069a:	2007      	movs	r0, #7
 800069c:	f000 fa16 	bl	8000acc <HAL_NVIC_EnableIRQ>

}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b00a      	add	sp, #40	; 0x28
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	0000c004 	.word	0x0000c004
 80006b0:	48000800 	.word	0x48000800
 80006b4:	48001400 	.word	0x48001400
 80006b8:	00008020 	.word	0x00008020
 80006bc:	48000400 	.word	0x48000400
 80006c0:	00000878 	.word	0x00000878

080006c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	0002      	movs	r2, r0
 80006cc:	1dbb      	adds	r3, r7, #6
 80006ce:	801a      	strh	r2, [r3, #0]
	currentKey = GPIO_Pin;
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80006d2:	1dba      	adds	r2, r7, #6
 80006d4:	8812      	ldrh	r2, [r2, #0]
 80006d6:	801a      	strh	r2, [r3, #0]
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000000 	.word	0x20000000

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ea:	e7fe      	b.n	80006ea <Error_Handler+0x6>

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x44>)
 80006f4:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <HAL_MspInit+0x44>)
 80006f6:	6992      	ldr	r2, [r2, #24]
 80006f8:	2101      	movs	r1, #1
 80006fa:	430a      	orrs	r2, r1
 80006fc:	619a      	str	r2, [r3, #24]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_MspInit+0x44>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	2201      	movs	r2, #1
 8000704:	4013      	ands	r3, r2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_MspInit+0x44>)
 800070c:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_MspInit+0x44>)
 800070e:	69d2      	ldr	r2, [r2, #28]
 8000710:	2180      	movs	r1, #128	; 0x80
 8000712:	0549      	lsls	r1, r1, #21
 8000714:	430a      	orrs	r2, r1
 8000716:	61da      	str	r2, [r3, #28]
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_MspInit+0x44>)
 800071a:	69da      	ldr	r2, [r3, #28]
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	055b      	lsls	r3, r3, #21
 8000720:	4013      	ands	r3, r2
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	2314      	movs	r3, #20
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	0018      	movs	r0, r3
 8000742:	2314      	movs	r3, #20
 8000744:	001a      	movs	r2, r3
 8000746:	2100      	movs	r1, #0
 8000748:	f001 fdc4 	bl	80022d4 <memset>
  if(huart->Instance==USART2)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <HAL_UART_MspInit+0x9c>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d137      	bne.n	80007c6 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <HAL_UART_MspInit+0xa0>)
 8000758:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <HAL_UART_MspInit+0xa0>)
 800075a:	69d2      	ldr	r2, [r2, #28]
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	0289      	lsls	r1, r1, #10
 8000760:	430a      	orrs	r2, r1
 8000762:	61da      	str	r2, [r3, #28]
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <HAL_UART_MspInit+0xa0>)
 8000766:	69da      	ldr	r2, [r3, #28]
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	029b      	lsls	r3, r3, #10
 800076c:	4013      	ands	r3, r2
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <HAL_UART_MspInit+0xa0>)
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_UART_MspInit+0xa0>)
 8000776:	6952      	ldr	r2, [r2, #20]
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	0289      	lsls	r1, r1, #10
 800077c:	430a      	orrs	r2, r1
 800077e:	615a      	str	r2, [r3, #20]
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_UART_MspInit+0xa0>)
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	029b      	lsls	r3, r3, #10
 8000788:	4013      	ands	r3, r2
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800078e:	2314      	movs	r3, #20
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	220c      	movs	r2, #12
 8000794:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2314      	movs	r3, #20
 8000798:	18fb      	adds	r3, r7, r3
 800079a:	2202      	movs	r2, #2
 800079c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2314      	movs	r3, #20
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2314      	movs	r3, #20
 80007a8:	18fb      	adds	r3, r7, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007ae:	2314      	movs	r3, #20
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	2201      	movs	r2, #1
 80007b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	2314      	movs	r3, #20
 80007b8:	18fa      	adds	r2, r7, r3
 80007ba:	2390      	movs	r3, #144	; 0x90
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 f9a1 	bl	8000b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b00a      	add	sp, #40	; 0x28
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	40004400 	.word	0x40004400
 80007d4:	40021000 	.word	0x40021000

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fc:	f000 f888 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800080a:	2008      	movs	r0, #8
 800080c:	f000 fb12 	bl	8000e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800081a:	2010      	movs	r0, #16
 800081c:	f000 fb0a 	bl	8000e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000820:	2020      	movs	r0, #32
 8000822:	f000 fb07 	bl	8000e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000826:	2040      	movs	r0, #64	; 0x40
 8000828:	f000 fb04 	bl	8000e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800082c:	2080      	movs	r0, #128	; 0x80
 800082e:	f000 fb01 	bl	8000e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fafc 	bl	8000e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	0018      	movs	r0, r3
 8000842:	f000 faf7 	bl	8000e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	0018      	movs	r0, r3
 800084c:	f000 faf2 	bl	8000e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	0018      	movs	r0, r3
 8000856:	f000 faed 	bl	8000e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	015b      	lsls	r3, r3, #5
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fae8 	bl	8000e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	019b      	lsls	r3, r3, #6
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fae3 	bl	8000e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <HAL_Init+0x24>)
 8000886:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x24>)
 8000888:	6812      	ldr	r2, [r2, #0]
 800088a:	2110      	movs	r1, #16
 800088c:	430a      	orrs	r2, r1
 800088e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000890:	2000      	movs	r0, #0
 8000892:	f000 f809 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000896:	f7ff ff29 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089a:	2300      	movs	r3, #0
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_InitTick+0x5c>)
 80008b2:	681c      	ldr	r4, [r3, #0]
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_InitTick+0x60>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	0019      	movs	r1, r3
 80008ba:	23fa      	movs	r3, #250	; 0xfa
 80008bc:	0098      	lsls	r0, r3, #2
 80008be:	f7ff fc21 	bl	8000104 <__udivsi3>
 80008c2:	0003      	movs	r3, r0
 80008c4:	0019      	movs	r1, r3
 80008c6:	0020      	movs	r0, r4
 80008c8:	f7ff fc1c 	bl	8000104 <__udivsi3>
 80008cc:	0003      	movs	r3, r0
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 f90c 	bl	8000aec <HAL_SYSTICK_Config>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	e00f      	b.n	80008fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b03      	cmp	r3, #3
 80008e0:	d80b      	bhi.n	80008fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	2301      	movs	r3, #1
 80008e6:	425b      	negs	r3, r3
 80008e8:	2200      	movs	r2, #0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 f8d8 	bl	8000aa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_InitTick+0x64>)
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	0018      	movs	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	b003      	add	sp, #12
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	20000004 	.word	0x20000004
 8000908:	2000000c 	.word	0x2000000c
 800090c:	20000008 	.word	0x20000008

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_IncTick+0x1c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	001a      	movs	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_IncTick+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	18d2      	adds	r2, r2, r3
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <HAL_IncTick+0x20>)
 8000922:	601a      	str	r2, [r3, #0]
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	2000000c 	.word	0x2000000c
 8000930:	200000b0 	.word	0x200000b0

08000934 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <HAL_GetTick+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	200000b0 	.word	0x200000b0

08000948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	0002      	movs	r2, r0
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b7f      	cmp	r3, #127	; 0x7f
 800095a:	d809      	bhi.n	8000970 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <__NVIC_EnableIRQ+0x30>)
 800095e:	1dfa      	adds	r2, r7, #7
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	0011      	movs	r1, r2
 8000964:	221f      	movs	r2, #31
 8000966:	400a      	ands	r2, r1
 8000968:	2101      	movs	r1, #1
 800096a:	4091      	lsls	r1, r2
 800096c:	000a      	movs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]
  }
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}
 8000978:	e000e100 	.word	0xe000e100

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	0002      	movs	r2, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b7f      	cmp	r3, #127	; 0x7f
 8000990:	d828      	bhi.n	80009e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000992:	4c2f      	ldr	r4, [pc, #188]	; (8000a50 <__NVIC_SetPriority+0xd4>)
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b25b      	sxtb	r3, r3
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	492c      	ldr	r1, [pc, #176]	; (8000a50 <__NVIC_SetPriority+0xd4>)
 800099e:	1dfa      	adds	r2, r7, #7
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	b252      	sxtb	r2, r2
 80009a4:	0892      	lsrs	r2, r2, #2
 80009a6:	32c0      	adds	r2, #192	; 0xc0
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	5852      	ldr	r2, [r2, r1]
 80009ac:	1df9      	adds	r1, r7, #7
 80009ae:	7809      	ldrb	r1, [r1, #0]
 80009b0:	0008      	movs	r0, r1
 80009b2:	2103      	movs	r1, #3
 80009b4:	4001      	ands	r1, r0
 80009b6:	00c9      	lsls	r1, r1, #3
 80009b8:	20ff      	movs	r0, #255	; 0xff
 80009ba:	4088      	lsls	r0, r1
 80009bc:	0001      	movs	r1, r0
 80009be:	43c9      	mvns	r1, r1
 80009c0:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	0192      	lsls	r2, r2, #6
 80009c6:	20ff      	movs	r0, #255	; 0xff
 80009c8:	4010      	ands	r0, r2
 80009ca:	1dfa      	adds	r2, r7, #7
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	0015      	movs	r5, r2
 80009d0:	2203      	movs	r2, #3
 80009d2:	402a      	ands	r2, r5
 80009d4:	00d2      	lsls	r2, r2, #3
 80009d6:	4090      	lsls	r0, r2
 80009d8:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009da:	430a      	orrs	r2, r1
 80009dc:	33c0      	adds	r3, #192	; 0xc0
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009e2:	e031      	b.n	8000a48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	4c1b      	ldr	r4, [pc, #108]	; (8000a54 <__NVIC_SetPriority+0xd8>)
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	001a      	movs	r2, r3
 80009ec:	230f      	movs	r3, #15
 80009ee:	4013      	ands	r3, r2
 80009f0:	3b08      	subs	r3, #8
 80009f2:	0899      	lsrs	r1, r3, #2
 80009f4:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <__NVIC_SetPriority+0xd8>)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	0018      	movs	r0, r3
 80009fc:	230f      	movs	r3, #15
 80009fe:	4003      	ands	r3, r0
 8000a00:	3b08      	subs	r3, #8
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	3306      	adds	r3, #6
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	18d3      	adds	r3, r2, r3
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1dfa      	adds	r2, r7, #7
 8000a10:	7812      	ldrb	r2, [r2, #0]
 8000a12:	0010      	movs	r0, r2
 8000a14:	2203      	movs	r2, #3
 8000a16:	4002      	ands	r2, r0
 8000a18:	00d2      	lsls	r2, r2, #3
 8000a1a:	20ff      	movs	r0, #255	; 0xff
 8000a1c:	4090      	lsls	r0, r2
 8000a1e:	0002      	movs	r2, r0
 8000a20:	43d2      	mvns	r2, r2
 8000a22:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	019b      	lsls	r3, r3, #6
 8000a28:	20ff      	movs	r0, #255	; 0xff
 8000a2a:	4018      	ands	r0, r3
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	001d      	movs	r5, r3
 8000a32:	2303      	movs	r3, #3
 8000a34:	402b      	ands	r3, r5
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	4098      	lsls	r0, r3
 8000a3a:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	1d8b      	adds	r3, r1, #6
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	18e3      	adds	r3, r4, r3
 8000a44:	3304      	adds	r3, #4
 8000a46:	601a      	str	r2, [r3, #0]
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <SysTick_Config+0x40>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d901      	bls.n	8000a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e010      	b.n	8000a90 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <SysTick_Config+0x44>)
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	3a01      	subs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a76:	2301      	movs	r3, #1
 8000a78:	425b      	negs	r3, r3
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ff7d 	bl	800097c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <SysTick_Config+0x44>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a88:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x44>)
 8000a8a:	2207      	movs	r2, #7
 8000a8c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	00ffffff 	.word	0x00ffffff
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	230f      	movs	r3, #15
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	1c02      	adds	r2, r0, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	18fb      	adds	r3, r7, r3
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	0011      	movs	r1, r2
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f7ff ff5c 	bl	800097c <__NVIC_SetPriority>
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b004      	add	sp, #16
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff ff32 	bl	8000948 <__NVIC_EnableIRQ>
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}

08000aec <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff ffae 	bl	8000a58 <SysTick_Config>
 8000afc:	0003      	movs	r3, r0
}
 8000afe:	0018      	movs	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b16:	e155      	b.n	8000dc4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	4091      	lsls	r1, r2
 8000b22:	000a      	movs	r2, r1
 8000b24:	4013      	ands	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d100      	bne.n	8000b30 <HAL_GPIO_Init+0x28>
 8000b2e:	e146      	b.n	8000dbe <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2203      	movs	r2, #3
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d005      	beq.n	8000b48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2203      	movs	r2, #3
 8000b42:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d130      	bne.n	8000baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	409a      	lsls	r2, r3
 8000b56:	0013      	movs	r3, r2
 8000b58:	43da      	mvns	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	409a      	lsls	r2, r3
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b7e:	2201      	movs	r2, #1
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
 8000b84:	0013      	movs	r3, r2
 8000b86:	43da      	mvns	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	2201      	movs	r2, #1
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	0013      	movs	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2203      	movs	r2, #3
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d017      	beq.n	8000be6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	409a      	lsls	r2, r3
 8000bc4:	0013      	movs	r3, r2
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2203      	movs	r2, #3
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d123      	bne.n	8000c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	08da      	lsrs	r2, r3, #3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	0092      	lsls	r2, r2, #2
 8000bfc:	58d3      	ldr	r3, [r2, r3]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	2207      	movs	r2, #7
 8000c04:	4013      	ands	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	220f      	movs	r2, #15
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	691a      	ldr	r2, [r3, #16]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	2107      	movs	r1, #7
 8000c1e:	400b      	ands	r3, r1
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	08da      	lsrs	r2, r3, #3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3208      	adds	r2, #8
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	6939      	ldr	r1, [r7, #16]
 8000c38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	2203      	movs	r2, #3
 8000c46:	409a      	lsls	r2, r3
 8000c48:	0013      	movs	r3, r2
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2203      	movs	r2, #3
 8000c58:	401a      	ands	r2, r3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	23c0      	movs	r3, #192	; 0xc0
 8000c74:	029b      	lsls	r3, r3, #10
 8000c76:	4013      	ands	r3, r2
 8000c78:	d100      	bne.n	8000c7c <HAL_GPIO_Init+0x174>
 8000c7a:	e0a0      	b.n	8000dbe <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7c:	4b57      	ldr	r3, [pc, #348]	; (8000ddc <HAL_GPIO_Init+0x2d4>)
 8000c7e:	4a57      	ldr	r2, [pc, #348]	; (8000ddc <HAL_GPIO_Init+0x2d4>)
 8000c80:	6992      	ldr	r2, [r2, #24]
 8000c82:	2101      	movs	r1, #1
 8000c84:	430a      	orrs	r2, r1
 8000c86:	619a      	str	r2, [r3, #24]
 8000c88:	4b54      	ldr	r3, [pc, #336]	; (8000ddc <HAL_GPIO_Init+0x2d4>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c94:	4a52      	ldr	r2, [pc, #328]	; (8000de0 <HAL_GPIO_Init+0x2d8>)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	589b      	ldr	r3, [r3, r2]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	409a      	lsls	r2, r3
 8000cae:	0013      	movs	r3, r2
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	2390      	movs	r3, #144	; 0x90
 8000cbc:	05db      	lsls	r3, r3, #23
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d019      	beq.n	8000cf6 <HAL_GPIO_Init+0x1ee>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a47      	ldr	r2, [pc, #284]	; (8000de4 <HAL_GPIO_Init+0x2dc>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d013      	beq.n	8000cf2 <HAL_GPIO_Init+0x1ea>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a46      	ldr	r2, [pc, #280]	; (8000de8 <HAL_GPIO_Init+0x2e0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d00d      	beq.n	8000cee <HAL_GPIO_Init+0x1e6>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a45      	ldr	r2, [pc, #276]	; (8000dec <HAL_GPIO_Init+0x2e4>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d007      	beq.n	8000cea <HAL_GPIO_Init+0x1e2>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a44      	ldr	r2, [pc, #272]	; (8000df0 <HAL_GPIO_Init+0x2e8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d101      	bne.n	8000ce6 <HAL_GPIO_Init+0x1de>
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	e008      	b.n	8000cf8 <HAL_GPIO_Init+0x1f0>
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	e006      	b.n	8000cf8 <HAL_GPIO_Init+0x1f0>
 8000cea:	2303      	movs	r3, #3
 8000cec:	e004      	b.n	8000cf8 <HAL_GPIO_Init+0x1f0>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e002      	b.n	8000cf8 <HAL_GPIO_Init+0x1f0>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <HAL_GPIO_Init+0x1f0>
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	400a      	ands	r2, r1
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	4093      	lsls	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d08:	4935      	ldr	r1, [pc, #212]	; (8000de0 <HAL_GPIO_Init+0x2d8>)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d16:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <HAL_GPIO_Init+0x2ec>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	025b      	lsls	r3, r3, #9
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <HAL_GPIO_Init+0x2ec>)
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d40:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <HAL_GPIO_Init+0x2ec>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	43da      	mvns	r2, r3
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	029b      	lsls	r3, r3, #10
 8000d58:	4013      	ands	r3, r2
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_GPIO_Init+0x2ec>)
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d6a:	4b22      	ldr	r3, [pc, #136]	; (8000df4 <HAL_GPIO_Init+0x2ec>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	43da      	mvns	r2, r3
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	035b      	lsls	r3, r3, #13
 8000d82:	4013      	ands	r3, r2
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_GPIO_Init+0x2ec>)
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_GPIO_Init+0x2ec>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43da      	mvns	r2, r3
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	039b      	lsls	r3, r3, #14
 8000dac:	4013      	ands	r3, r2
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_GPIO_Init+0x2ec>)
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	40da      	lsrs	r2, r3
 8000dcc:	1e13      	subs	r3, r2, #0
 8000dce:	d000      	beq.n	8000dd2 <HAL_GPIO_Init+0x2ca>
 8000dd0:	e6a2      	b.n	8000b18 <HAL_GPIO_Init+0x10>
  } 
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b006      	add	sp, #24
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000
 8000de4:	48000400 	.word	0x48000400
 8000de8:	48000800 	.word	0x48000800
 8000dec:	48000c00 	.word	0x48000c00
 8000df0:	48001000 	.word	0x48001000
 8000df4:	40010400 	.word	0x40010400

08000df8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	0008      	movs	r0, r1
 8000e02:	0011      	movs	r1, r2
 8000e04:	1cbb      	adds	r3, r7, #2
 8000e06:	1c02      	adds	r2, r0, #0
 8000e08:	801a      	strh	r2, [r3, #0]
 8000e0a:	1c7b      	adds	r3, r7, #1
 8000e0c:	1c0a      	adds	r2, r1, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e10:	1c7b      	adds	r3, r7, #1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d004      	beq.n	8000e22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e18:	1cbb      	adds	r3, r7, #2
 8000e1a:	881a      	ldrh	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e20:	e003      	b.n	8000e2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e22:	1cbb      	adds	r3, r7, #2
 8000e24:	881a      	ldrh	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	1dbb      	adds	r3, r7, #6
 8000e3e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	1dba      	adds	r2, r7, #6
 8000e46:	8812      	ldrh	r2, [r2, #0]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d008      	beq.n	8000e5e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e4e:	1dba      	adds	r2, r7, #6
 8000e50:	8812      	ldrh	r2, [r2, #0]
 8000e52:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e54:	1dbb      	adds	r3, r7, #6
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fc33 	bl	80006c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	40010400 	.word	0x40010400

08000e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d102      	bne.n	8000e80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f000 fb74 	bl	8001568 <HAL_RCC_OscConfig+0x6fc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2201      	movs	r2, #1
 8000e86:	4013      	ands	r3, r2
 8000e88:	d100      	bne.n	8000e8c <HAL_RCC_OscConfig+0x20>
 8000e8a:	e08e      	b.n	8000faa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e8c:	4bc5      	ldr	r3, [pc, #788]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	220c      	movs	r2, #12
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d00e      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e98:	4bc2      	ldr	r3, [pc, #776]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b08      	cmp	r3, #8
 8000ea2:	d117      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x68>
 8000ea4:	4bbf      	ldr	r3, [pc, #764]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	23c0      	movs	r3, #192	; 0xc0
 8000eaa:	025b      	lsls	r3, r3, #9
 8000eac:	401a      	ands	r2, r3
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	025b      	lsls	r3, r3, #9
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d10e      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb6:	4bbb      	ldr	r3, [pc, #748]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	029b      	lsls	r3, r3, #10
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d100      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x58>
 8000ec2:	e071      	b.n	8000fa8 <HAL_RCC_OscConfig+0x13c>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d000      	beq.n	8000ece <HAL_RCC_OscConfig+0x62>
 8000ecc:	e06c      	b.n	8000fa8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	f000 fb4a 	bl	8001568 <HAL_RCC_OscConfig+0x6fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d107      	bne.n	8000eec <HAL_RCC_OscConfig+0x80>
 8000edc:	4bb1      	ldr	r3, [pc, #708]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000ede:	4ab1      	ldr	r2, [pc, #708]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e02f      	b.n	8000f4c <HAL_RCC_OscConfig+0xe0>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10c      	bne.n	8000f0e <HAL_RCC_OscConfig+0xa2>
 8000ef4:	4bab      	ldr	r3, [pc, #684]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000ef6:	4aab      	ldr	r2, [pc, #684]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000ef8:	6812      	ldr	r2, [r2, #0]
 8000efa:	49ab      	ldr	r1, [pc, #684]	; (80011a8 <HAL_RCC_OscConfig+0x33c>)
 8000efc:	400a      	ands	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	4ba8      	ldr	r3, [pc, #672]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f02:	4aa8      	ldr	r2, [pc, #672]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	49a9      	ldr	r1, [pc, #676]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000f08:	400a      	ands	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e01e      	b.n	8000f4c <HAL_RCC_OscConfig+0xe0>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	d10e      	bne.n	8000f34 <HAL_RCC_OscConfig+0xc8>
 8000f16:	4ba3      	ldr	r3, [pc, #652]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f18:	4aa2      	ldr	r2, [pc, #648]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	02c9      	lsls	r1, r1, #11
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	4b9f      	ldr	r3, [pc, #636]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f26:	4a9f      	ldr	r2, [pc, #636]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	2180      	movs	r1, #128	; 0x80
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e00b      	b.n	8000f4c <HAL_RCC_OscConfig+0xe0>
 8000f34:	4b9b      	ldr	r3, [pc, #620]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f36:	4a9b      	ldr	r2, [pc, #620]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f38:	6812      	ldr	r2, [r2, #0]
 8000f3a:	499b      	ldr	r1, [pc, #620]	; (80011a8 <HAL_RCC_OscConfig+0x33c>)
 8000f3c:	400a      	ands	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	4b98      	ldr	r3, [pc, #608]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f42:	4a98      	ldr	r2, [pc, #608]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f44:	6812      	ldr	r2, [r2, #0]
 8000f46:	4999      	ldr	r1, [pc, #612]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000f48:	400a      	ands	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d014      	beq.n	8000f7e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fcee 	bl	8000934 <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fce9 	bl	8000934 <HAL_GetTick>
 8000f62:	0002      	movs	r2, r0
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b64      	cmp	r3, #100	; 0x64
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e2fb      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f70:	4b8c      	ldr	r3, [pc, #560]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	029b      	lsls	r3, r3, #10
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0xf2>
 8000f7c:	e015      	b.n	8000faa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fcd9 	bl	8000934 <HAL_GetTick>
 8000f82:	0003      	movs	r3, r0
 8000f84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fcd4 	bl	8000934 <HAL_GetTick>
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	; 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e2e6      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	4b82      	ldr	r3, [pc, #520]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	029b      	lsls	r3, r3, #10
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d1f0      	bne.n	8000f88 <HAL_RCC_OscConfig+0x11c>
 8000fa6:	e000      	b.n	8000faa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d100      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x14a>
 8000fb4:	e06c      	b.n	8001090 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fb6:	4b7b      	ldr	r3, [pc, #492]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	220c      	movs	r2, #12
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d00e      	beq.n	8000fde <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fc0:	4b78      	ldr	r3, [pc, #480]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d11f      	bne.n	800100c <HAL_RCC_OscConfig+0x1a0>
 8000fcc:	4b75      	ldr	r3, [pc, #468]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	23c0      	movs	r3, #192	; 0xc0
 8000fd2:	025b      	lsls	r3, r3, #9
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d116      	bne.n	800100c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fde:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d005      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x188>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d001      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e2b9      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff4:	4a6b      	ldr	r2, [pc, #428]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000ff6:	4b6b      	ldr	r3, [pc, #428]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	21f8      	movs	r1, #248	; 0xf8
 8000ffc:	438b      	bics	r3, r1
 8000ffe:	0019      	movs	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	430b      	orrs	r3, r1
 8001008:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100a:	e041      	b.n	8001090 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d024      	beq.n	800105e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001014:	4b63      	ldr	r3, [pc, #396]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8001016:	4a63      	ldr	r2, [pc, #396]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8001018:	6812      	ldr	r2, [r2, #0]
 800101a:	2101      	movs	r1, #1
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fc88 	bl	8000934 <HAL_GetTick>
 8001024:	0003      	movs	r3, r0
 8001026:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102a:	f7ff fc83 	bl	8000934 <HAL_GetTick>
 800102e:	0002      	movs	r2, r0
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e295      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	4b59      	ldr	r3, [pc, #356]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2202      	movs	r2, #2
 8001042:	4013      	ands	r3, r2
 8001044:	d0f1      	beq.n	800102a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001046:	4a57      	ldr	r2, [pc, #348]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8001048:	4b56      	ldr	r3, [pc, #344]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	21f8      	movs	r1, #248	; 0xf8
 800104e:	438b      	bics	r3, r1
 8001050:	0019      	movs	r1, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	430b      	orrs	r3, r1
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e018      	b.n	8001090 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105e:	4b51      	ldr	r3, [pc, #324]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8001060:	4a50      	ldr	r2, [pc, #320]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	2101      	movs	r1, #1
 8001066:	438a      	bics	r2, r1
 8001068:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106a:	f7ff fc63 	bl	8000934 <HAL_GetTick>
 800106e:	0003      	movs	r3, r0
 8001070:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001074:	f7ff fc5e 	bl	8000934 <HAL_GetTick>
 8001078:	0002      	movs	r2, r0
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e270      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001086:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2202      	movs	r2, #2
 800108c:	4013      	ands	r3, r2
 800108e:	d1f1      	bne.n	8001074 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2208      	movs	r2, #8
 8001096:	4013      	ands	r3, r2
 8001098:	d036      	beq.n	8001108 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d019      	beq.n	80010d6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a2:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 80010a4:	4a3f      	ldr	r2, [pc, #252]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 80010a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010a8:	2101      	movs	r1, #1
 80010aa:	430a      	orrs	r2, r1
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ae:	f7ff fc41 	bl	8000934 <HAL_GetTick>
 80010b2:	0003      	movs	r3, r0
 80010b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b8:	f7ff fc3c 	bl	8000934 <HAL_GetTick>
 80010bc:	0002      	movs	r2, r0
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e24e      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ca:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d0f1      	beq.n	80010b8 <HAL_RCC_OscConfig+0x24c>
 80010d4:	e018      	b.n	8001108 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d6:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 80010d8:	4a32      	ldr	r2, [pc, #200]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 80010da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010dc:	2101      	movs	r1, #1
 80010de:	438a      	bics	r2, r1
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fc27 	bl	8000934 <HAL_GetTick>
 80010e6:	0003      	movs	r3, r0
 80010e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fc22 	bl	8000934 <HAL_GetTick>
 80010f0:	0002      	movs	r2, r0
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e234      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010fe:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	2202      	movs	r2, #2
 8001104:	4013      	ands	r3, r2
 8001106:	d1f1      	bne.n	80010ec <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2204      	movs	r2, #4
 800110e:	4013      	ands	r3, r2
 8001110:	d100      	bne.n	8001114 <HAL_RCC_OscConfig+0x2a8>
 8001112:	e0b5      	b.n	8001280 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001114:	231f      	movs	r3, #31
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 800111e:	69da      	ldr	r2, [r3, #28]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	055b      	lsls	r3, r3, #21
 8001124:	4013      	ands	r3, r2
 8001126:	d111      	bne.n	800114c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 800112c:	69d2      	ldr	r2, [r2, #28]
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	0549      	lsls	r1, r1, #21
 8001132:	430a      	orrs	r2, r1
 8001134:	61da      	str	r2, [r3, #28]
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8001138:	69da      	ldr	r2, [r3, #28]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	055b      	lsls	r3, r3, #21
 800113e:	4013      	ands	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001144:	231f      	movs	r3, #31
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_RCC_OscConfig+0x344>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4013      	ands	r3, r2
 8001156:	d11a      	bne.n	800118e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_RCC_OscConfig+0x344>)
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_RCC_OscConfig+0x344>)
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	0049      	lsls	r1, r1, #1
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001166:	f7ff fbe5 	bl	8000934 <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001170:	f7ff fbe0 	bl	8000934 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e1f2      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <HAL_RCC_OscConfig+0x344>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4013      	ands	r3, r2
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d10e      	bne.n	80011b4 <HAL_RCC_OscConfig+0x348>
 8001196:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 8001198:	4a02      	ldr	r2, [pc, #8]	; (80011a4 <HAL_RCC_OscConfig+0x338>)
 800119a:	6a12      	ldr	r2, [r2, #32]
 800119c:	2101      	movs	r1, #1
 800119e:	430a      	orrs	r2, r1
 80011a0:	621a      	str	r2, [r3, #32]
 80011a2:	e035      	b.n	8001210 <HAL_RCC_OscConfig+0x3a4>
 80011a4:	40021000 	.word	0x40021000
 80011a8:	fffeffff 	.word	0xfffeffff
 80011ac:	fffbffff 	.word	0xfffbffff
 80011b0:	40007000 	.word	0x40007000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10c      	bne.n	80011d6 <HAL_RCC_OscConfig+0x36a>
 80011bc:	4bc9      	ldr	r3, [pc, #804]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80011be:	4ac9      	ldr	r2, [pc, #804]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80011c0:	6a12      	ldr	r2, [r2, #32]
 80011c2:	2101      	movs	r1, #1
 80011c4:	438a      	bics	r2, r1
 80011c6:	621a      	str	r2, [r3, #32]
 80011c8:	4bc6      	ldr	r3, [pc, #792]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80011ca:	4ac6      	ldr	r2, [pc, #792]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80011cc:	6a12      	ldr	r2, [r2, #32]
 80011ce:	2104      	movs	r1, #4
 80011d0:	438a      	bics	r2, r1
 80011d2:	621a      	str	r2, [r3, #32]
 80011d4:	e01c      	b.n	8001210 <HAL_RCC_OscConfig+0x3a4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x38c>
 80011de:	4bc1      	ldr	r3, [pc, #772]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80011e0:	4ac0      	ldr	r2, [pc, #768]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80011e2:	6a12      	ldr	r2, [r2, #32]
 80011e4:	2104      	movs	r1, #4
 80011e6:	430a      	orrs	r2, r1
 80011e8:	621a      	str	r2, [r3, #32]
 80011ea:	4bbe      	ldr	r3, [pc, #760]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80011ec:	4abd      	ldr	r2, [pc, #756]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80011ee:	6a12      	ldr	r2, [r2, #32]
 80011f0:	2101      	movs	r1, #1
 80011f2:	430a      	orrs	r2, r1
 80011f4:	621a      	str	r2, [r3, #32]
 80011f6:	e00b      	b.n	8001210 <HAL_RCC_OscConfig+0x3a4>
 80011f8:	4bba      	ldr	r3, [pc, #744]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80011fa:	4aba      	ldr	r2, [pc, #744]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80011fc:	6a12      	ldr	r2, [r2, #32]
 80011fe:	2101      	movs	r1, #1
 8001200:	438a      	bics	r2, r1
 8001202:	621a      	str	r2, [r3, #32]
 8001204:	4bb7      	ldr	r3, [pc, #732]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001206:	4ab7      	ldr	r2, [pc, #732]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001208:	6a12      	ldr	r2, [r2, #32]
 800120a:	2104      	movs	r1, #4
 800120c:	438a      	bics	r2, r1
 800120e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d014      	beq.n	8001242 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001218:	f7ff fb8c 	bl	8000934 <HAL_GetTick>
 800121c:	0003      	movs	r3, r0
 800121e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	e009      	b.n	8001236 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fb87 	bl	8000934 <HAL_GetTick>
 8001226:	0002      	movs	r2, r0
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	4aae      	ldr	r2, [pc, #696]	; (80014e8 <HAL_RCC_OscConfig+0x67c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e198      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001236:	4bab      	ldr	r3, [pc, #684]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	2202      	movs	r2, #2
 800123c:	4013      	ands	r3, r2
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x3b6>
 8001240:	e013      	b.n	800126a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001242:	f7ff fb77 	bl	8000934 <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124a:	e009      	b.n	8001260 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800124c:	f7ff fb72 	bl	8000934 <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	4aa4      	ldr	r2, [pc, #656]	; (80014e8 <HAL_RCC_OscConfig+0x67c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e183      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001260:	4ba0      	ldr	r3, [pc, #640]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	2202      	movs	r2, #2
 8001266:	4013      	ands	r3, r2
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800126a:	231f      	movs	r3, #31
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d105      	bne.n	8001280 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001274:	4b9b      	ldr	r3, [pc, #620]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001276:	4a9b      	ldr	r2, [pc, #620]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001278:	69d2      	ldr	r2, [r2, #28]
 800127a:	499c      	ldr	r1, [pc, #624]	; (80014ec <HAL_RCC_OscConfig+0x680>)
 800127c:	400a      	ands	r2, r1
 800127e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2210      	movs	r2, #16
 8001286:	4013      	ands	r3, r2
 8001288:	d063      	beq.n	8001352 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d12a      	bne.n	80012e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001292:	4b94      	ldr	r3, [pc, #592]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001294:	4a93      	ldr	r2, [pc, #588]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001296:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001298:	2104      	movs	r1, #4
 800129a:	430a      	orrs	r2, r1
 800129c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800129e:	4b91      	ldr	r3, [pc, #580]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80012a0:	4a90      	ldr	r2, [pc, #576]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80012a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012a4:	2101      	movs	r1, #1
 80012a6:	430a      	orrs	r2, r1
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fb43 	bl	8000934 <HAL_GetTick>
 80012ae:	0003      	movs	r3, r0
 80012b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012b4:	f7ff fb3e 	bl	8000934 <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e150      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012c6:	4b87      	ldr	r3, [pc, #540]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80012c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ca:	2202      	movs	r2, #2
 80012cc:	4013      	ands	r3, r2
 80012ce:	d0f1      	beq.n	80012b4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012d0:	4a84      	ldr	r2, [pc, #528]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80012d2:	4b84      	ldr	r3, [pc, #528]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	21f8      	movs	r1, #248	; 0xf8
 80012d8:	438b      	bics	r3, r1
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	430b      	orrs	r3, r1
 80012e4:	6353      	str	r3, [r2, #52]	; 0x34
 80012e6:	e034      	b.n	8001352 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	3305      	adds	r3, #5
 80012ee:	d111      	bne.n	8001314 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012f0:	4b7c      	ldr	r3, [pc, #496]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80012f2:	4a7c      	ldr	r2, [pc, #496]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80012f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012f6:	2104      	movs	r1, #4
 80012f8:	438a      	bics	r2, r1
 80012fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012fc:	4a79      	ldr	r2, [pc, #484]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80012fe:	4b79      	ldr	r3, [pc, #484]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001302:	21f8      	movs	r1, #248	; 0xf8
 8001304:	438b      	bics	r3, r1
 8001306:	0019      	movs	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	430b      	orrs	r3, r1
 8001310:	6353      	str	r3, [r2, #52]	; 0x34
 8001312:	e01e      	b.n	8001352 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001314:	4b73      	ldr	r3, [pc, #460]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001316:	4a73      	ldr	r2, [pc, #460]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001318:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800131a:	2104      	movs	r1, #4
 800131c:	430a      	orrs	r2, r1
 800131e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001320:	4b70      	ldr	r3, [pc, #448]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001322:	4a70      	ldr	r2, [pc, #448]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001324:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001326:	2101      	movs	r1, #1
 8001328:	438a      	bics	r2, r1
 800132a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132c:	f7ff fb02 	bl	8000934 <HAL_GetTick>
 8001330:	0003      	movs	r3, r0
 8001332:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001336:	f7ff fafd 	bl	8000934 <HAL_GetTick>
 800133a:	0002      	movs	r2, r0
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e10f      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001348:	4b66      	ldr	r3, [pc, #408]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 800134a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134c:	2202      	movs	r2, #2
 800134e:	4013      	ands	r3, r2
 8001350:	d1f1      	bne.n	8001336 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2220      	movs	r2, #32
 8001358:	4013      	ands	r3, r2
 800135a:	d05c      	beq.n	8001416 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800135c:	4b61      	ldr	r3, [pc, #388]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	220c      	movs	r2, #12
 8001362:	4013      	ands	r3, r2
 8001364:	2b0c      	cmp	r3, #12
 8001366:	d00e      	beq.n	8001386 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001368:	4b5e      	ldr	r3, [pc, #376]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	220c      	movs	r2, #12
 800136e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001370:	2b08      	cmp	r3, #8
 8001372:	d114      	bne.n	800139e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001374:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	23c0      	movs	r3, #192	; 0xc0
 800137a:	025b      	lsls	r3, r3, #9
 800137c:	401a      	ands	r2, r3
 800137e:	23c0      	movs	r3, #192	; 0xc0
 8001380:	025b      	lsls	r3, r3, #9
 8001382:	429a      	cmp	r2, r3
 8001384:	d10b      	bne.n	800139e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001386:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	025b      	lsls	r3, r3, #9
 800138e:	4013      	ands	r3, r2
 8001390:	d040      	beq.n	8001414 <HAL_RCC_OscConfig+0x5a8>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d03c      	beq.n	8001414 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0e4      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d01b      	beq.n	80013de <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013a6:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80013a8:	4a4e      	ldr	r2, [pc, #312]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80013aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	0249      	lsls	r1, r1, #9
 80013b0:	430a      	orrs	r2, r1
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fabe 	bl	8000934 <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013be:	f7ff fab9 	bl	8000934 <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e0cb      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80013d0:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80013d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	025b      	lsls	r3, r3, #9
 80013d8:	4013      	ands	r3, r2
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x552>
 80013dc:	e01b      	b.n	8001416 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013de:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80013e0:	4a40      	ldr	r2, [pc, #256]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80013e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013e4:	4942      	ldr	r1, [pc, #264]	; (80014f0 <HAL_RCC_OscConfig+0x684>)
 80013e6:	400a      	ands	r2, r1
 80013e8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff faa3 	bl	8000934 <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013f4:	f7ff fa9e 	bl	8000934 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e0b0      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	025b      	lsls	r3, r3, #9
 800140e:	4013      	ands	r3, r2
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x588>
 8001412:	e000      	b.n	8001416 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001414:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	2b00      	cmp	r3, #0
 800141c:	d100      	bne.n	8001420 <HAL_RCC_OscConfig+0x5b4>
 800141e:	e0a2      	b.n	8001566 <HAL_RCC_OscConfig+0x6fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	220c      	movs	r2, #12
 8001426:	4013      	ands	r3, r2
 8001428:	2b08      	cmp	r3, #8
 800142a:	d100      	bne.n	800142e <HAL_RCC_OscConfig+0x5c2>
 800142c:	e076      	b.n	800151c <HAL_RCC_OscConfig+0x6b0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	2b02      	cmp	r3, #2
 8001434:	d14b      	bne.n	80014ce <HAL_RCC_OscConfig+0x662>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001438:	4a2a      	ldr	r2, [pc, #168]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	492d      	ldr	r1, [pc, #180]	; (80014f4 <HAL_RCC_OscConfig+0x688>)
 800143e:	400a      	ands	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fa77 	bl	8000934 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fa72 	bl	8000934 <HAL_GetTick>
 8001450:	0002      	movs	r2, r0
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e084      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	049b      	lsls	r3, r3, #18
 8001466:	4013      	ands	r3, r2
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146a:	4a1e      	ldr	r2, [pc, #120]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	210f      	movs	r1, #15
 8001472:	438b      	bics	r3, r1
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	430b      	orrs	r3, r1
 800147c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800147e:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	491c      	ldr	r1, [pc, #112]	; (80014f8 <HAL_RCC_OscConfig+0x68c>)
 8001486:	4019      	ands	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	4303      	orrs	r3, r0
 8001492:	430b      	orrs	r3, r1
 8001494:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 8001498:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	2180      	movs	r1, #128	; 0x80
 800149e:	0449      	lsls	r1, r1, #17
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fa46 	bl	8000934 <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x654>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fa41 	bl	8000934 <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x654>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e053      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	049b      	lsls	r3, r3, #18
 80014c8:	4013      	ands	r3, r2
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x642>
 80014cc:	e04b      	b.n	8001566 <HAL_RCC_OscConfig+0x6fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_RCC_OscConfig+0x678>)
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	4907      	ldr	r1, [pc, #28]	; (80014f4 <HAL_RCC_OscConfig+0x688>)
 80014d6:	400a      	ands	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fa2b 	bl	8000934 <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x6a2>
 80014e4:	40021000 	.word	0x40021000
 80014e8:	00001388 	.word	0x00001388
 80014ec:	efffffff 	.word	0xefffffff
 80014f0:	fffeffff 	.word	0xfffeffff
 80014f4:	feffffff 	.word	0xfeffffff
 80014f8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fc:	f7ff fa1a 	bl	8000934 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x6a2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e02c      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_RCC_OscConfig+0x704>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	049b      	lsls	r3, r3, #18
 8001516:	4013      	ands	r3, r2
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x690>
 800151a:	e024      	b.n	8001566 <HAL_RCC_OscConfig+0x6fa>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <HAL_RCC_OscConfig+0x6bc>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e01f      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_RCC_OscConfig+0x704>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <HAL_RCC_OscConfig+0x704>)
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	23c0      	movs	r3, #192	; 0xc0
 8001538:	025b      	lsls	r3, r3, #9
 800153a:	401a      	ands	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	429a      	cmp	r2, r3
 8001542:	d10e      	bne.n	8001562 <HAL_RCC_OscConfig+0x6f6>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	220f      	movs	r2, #15
 8001548:	401a      	ands	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	429a      	cmp	r2, r3
 8001550:	d107      	bne.n	8001562 <HAL_RCC_OscConfig+0x6f6>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	23f0      	movs	r3, #240	; 0xf0
 8001556:	039b      	lsls	r3, r3, #14
 8001558:	401a      	ands	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800155e:	429a      	cmp	r2, r3
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0x6fa>
        {
          return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_RCC_OscConfig+0x6fc>
        }
      }
    }
  }

  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	b008      	add	sp, #32
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40021000 	.word	0x40021000

08001574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0be      	b.n	8001706 <HAL_RCC_ClockConfig+0x192>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b61      	ldr	r3, [pc, #388]	; (8001710 <HAL_RCC_ClockConfig+0x19c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2201      	movs	r2, #1
 800158e:	401a      	ands	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d211      	bcs.n	80015ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b5e      	ldr	r3, [pc, #376]	; (8001710 <HAL_RCC_ClockConfig+0x19c>)
 8001598:	4a5d      	ldr	r2, [pc, #372]	; (8001710 <HAL_RCC_ClockConfig+0x19c>)
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	2101      	movs	r1, #1
 800159e:	438a      	bics	r2, r1
 80015a0:	0011      	movs	r1, r2
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_ClockConfig+0x19c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	401a      	ands	r2, r3
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0a5      	b.n	8001706 <HAL_RCC_ClockConfig+0x192>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2202      	movs	r2, #2
 80015c0:	4013      	ands	r3, r2
 80015c2:	d015      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2204      	movs	r2, #4
 80015ca:	4013      	ands	r3, r2
 80015cc:	d006      	beq.n	80015dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015ce:	4b51      	ldr	r3, [pc, #324]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 80015d0:	4a50      	ldr	r2, [pc, #320]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 80015d2:	6852      	ldr	r2, [r2, #4]
 80015d4:	21e0      	movs	r1, #224	; 0xe0
 80015d6:	00c9      	lsls	r1, r1, #3
 80015d8:	430a      	orrs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015dc:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 80015de:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	21f0      	movs	r1, #240	; 0xf0
 80015e4:	438b      	bics	r3, r1
 80015e6:	0019      	movs	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2201      	movs	r2, #1
 80015f6:	4013      	ands	r3, r2
 80015f8:	d04c      	beq.n	8001694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001602:	4b44      	ldr	r3, [pc, #272]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	029b      	lsls	r3, r3, #10
 800160a:	4013      	ands	r3, r2
 800160c:	d120      	bne.n	8001650 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e079      	b.n	8001706 <HAL_RCC_ClockConfig+0x192>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b3e      	ldr	r3, [pc, #248]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	049b      	lsls	r3, r3, #18
 8001622:	4013      	ands	r3, r2
 8001624:	d114      	bne.n	8001650 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06d      	b.n	8001706 <HAL_RCC_ClockConfig+0x192>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b03      	cmp	r3, #3
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001632:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 8001634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	025b      	lsls	r3, r3, #9
 800163a:	4013      	ands	r3, r2
 800163c:	d108      	bne.n	8001650 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e061      	b.n	8001706 <HAL_RCC_ClockConfig+0x192>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e05a      	b.n	8001706 <HAL_RCC_ClockConfig+0x192>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001650:	4a30      	ldr	r2, [pc, #192]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 8001652:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2103      	movs	r1, #3
 8001658:	438b      	bics	r3, r1
 800165a:	0019      	movs	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	430b      	orrs	r3, r1
 8001662:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001664:	f7ff f966 	bl	8000934 <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166c:	e009      	b.n	8001682 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166e:	f7ff f961 	bl	8000934 <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	4a27      	ldr	r2, [pc, #156]	; (8001718 <HAL_RCC_ClockConfig+0x1a4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e041      	b.n	8001706 <HAL_RCC_ClockConfig+0x192>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	220c      	movs	r2, #12
 8001688:	401a      	ands	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	429a      	cmp	r2, r3
 8001692:	d1ec      	bne.n	800166e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_RCC_ClockConfig+0x19c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	401a      	ands	r2, r3
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d911      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_RCC_ClockConfig+0x19c>)
 80016a4:	4a1a      	ldr	r2, [pc, #104]	; (8001710 <HAL_RCC_ClockConfig+0x19c>)
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	2101      	movs	r1, #1
 80016aa:	438a      	bics	r2, r1
 80016ac:	0011      	movs	r1, r2
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_RCC_ClockConfig+0x19c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2201      	movs	r2, #1
 80016ba:	401a      	ands	r2, r3
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d001      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e01f      	b.n	8001706 <HAL_RCC_ClockConfig+0x192>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2204      	movs	r2, #4
 80016cc:	4013      	ands	r3, r2
 80016ce:	d008      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016d0:	4a10      	ldr	r2, [pc, #64]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4911      	ldr	r1, [pc, #68]	; (800171c <HAL_RCC_ClockConfig+0x1a8>)
 80016d8:	4019      	ands	r1, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	430b      	orrs	r3, r1
 80016e0:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016e2:	f000 f821 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 80016e6:	0001      	movs	r1, r0
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1a0>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	220f      	movs	r2, #15
 80016f0:	4013      	ands	r3, r2
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <HAL_RCC_ClockConfig+0x1ac>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	000a      	movs	r2, r1
 80016f8:	40da      	lsrs	r2, r3
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_RCC_ClockConfig+0x1b0>)
 80016fc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff f8d2 	bl	80008a8 <HAL_InitTick>
  
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b004      	add	sp, #16
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	40022000 	.word	0x40022000
 8001714:	40021000 	.word	0x40021000
 8001718:	00001388 	.word	0x00001388
 800171c:	fffff8ff 	.word	0xfffff8ff
 8001720:	0800231c 	.word	0x0800231c
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b08f      	sub	sp, #60	; 0x3c
 800172c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800172e:	2314      	movs	r3, #20
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	4a37      	ldr	r2, [pc, #220]	; (8001810 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001734:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001736:	c313      	stmia	r3!, {r0, r1, r4}
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	4a35      	ldr	r2, [pc, #212]	; (8001814 <HAL_RCC_GetSysClockFreq+0xec>)
 8001740:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001742:	c313      	stmia	r3!, {r0, r1, r4}
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001750:	2300      	movs	r3, #0
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
 8001754:	2300      	movs	r3, #0
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <HAL_RCC_GetSysClockFreq+0xf0>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001764:	220c      	movs	r2, #12
 8001766:	4013      	ands	r3, r2
 8001768:	2b08      	cmp	r3, #8
 800176a:	d006      	beq.n	800177a <HAL_RCC_GetSysClockFreq+0x52>
 800176c:	2b0c      	cmp	r3, #12
 800176e:	d043      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0xd0>
 8001770:	2b04      	cmp	r3, #4
 8001772:	d144      	bne.n	80017fe <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001778:	e044      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	0c9b      	lsrs	r3, r3, #18
 800177e:	220f      	movs	r2, #15
 8001780:	4013      	ands	r3, r2
 8001782:	2214      	movs	r2, #20
 8001784:	18ba      	adds	r2, r7, r2
 8001786:	5cd3      	ldrb	r3, [r2, r3]
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <HAL_RCC_GetSysClockFreq+0xf0>)
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	220f      	movs	r2, #15
 8001790:	4013      	ands	r3, r2
 8001792:	1d3a      	adds	r2, r7, #4
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179a:	23c0      	movs	r3, #192	; 0xc0
 800179c:	025b      	lsls	r3, r3, #9
 800179e:	401a      	ands	r2, r3
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d109      	bne.n	80017bc <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017aa:	481c      	ldr	r0, [pc, #112]	; (800181c <HAL_RCC_GetSysClockFreq+0xf4>)
 80017ac:	f7fe fcaa 	bl	8000104 <__udivsi3>
 80017b0:	0003      	movs	r3, r0
 80017b2:	001a      	movs	r2, r3
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	4353      	muls	r3, r2
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
 80017ba:	e01a      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80017bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017be:	23c0      	movs	r3, #192	; 0xc0
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	401a      	ands	r2, r3
 80017c4:	23c0      	movs	r3, #192	; 0xc0
 80017c6:	025b      	lsls	r3, r3, #9
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d109      	bne.n	80017e0 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ce:	4814      	ldr	r0, [pc, #80]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017d0:	f7fe fc98 	bl	8000104 <__udivsi3>
 80017d4:	0003      	movs	r3, r0
 80017d6:	001a      	movs	r2, r3
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	4353      	muls	r3, r2
 80017dc:	637b      	str	r3, [r7, #52]	; 0x34
 80017de:	e008      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017e2:	480e      	ldr	r0, [pc, #56]	; (800181c <HAL_RCC_GetSysClockFreq+0xf4>)
 80017e4:	f7fe fc8e 	bl	8000104 <__udivsi3>
 80017e8:	0003      	movs	r3, r0
 80017ea:	001a      	movs	r2, r3
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	4353      	muls	r3, r2
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80017f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017f6:	e005      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017fc:	e002      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017fe:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001802:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001806:	0018      	movs	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	b00f      	add	sp, #60	; 0x3c
 800180c:	bd90      	pop	{r4, r7, pc}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	080022fc 	.word	0x080022fc
 8001814:	0800230c 	.word	0x0800230c
 8001818:	40021000 	.word	0x40021000
 800181c:	007a1200 	.word	0x007a1200
 8001820:	02dc6c00 	.word	0x02dc6c00

08001824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001828:	4b02      	ldr	r3, [pc, #8]	; (8001834 <HAL_RCC_GetHCLKFreq+0x10>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800183c:	f7ff fff2 	bl	8001824 <HAL_RCC_GetHCLKFreq>
 8001840:	0001      	movs	r1, r0
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	2207      	movs	r2, #7
 800184a:	4013      	ands	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_RCC_GetPCLK1Freq+0x28>)
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	40d9      	lsrs	r1, r3
 8001852:	000b      	movs	r3, r1
}    
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40021000 	.word	0x40021000
 8001860:	0800232c 	.word	0x0800232c

08001864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	025b      	lsls	r3, r3, #9
 800187c:	4013      	ands	r3, r2
 800187e:	d100      	bne.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001880:	e08e      	b.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001882:	2317      	movs	r3, #23
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	055b      	lsls	r3, r3, #21
 8001892:	4013      	ands	r3, r2
 8001894:	d111      	bne.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001898:	4a69      	ldr	r2, [pc, #420]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800189a:	69d2      	ldr	r2, [r2, #28]
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	0549      	lsls	r1, r1, #21
 80018a0:	430a      	orrs	r2, r1
 80018a2:	61da      	str	r2, [r3, #28]
 80018a4:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80018a6:	69da      	ldr	r2, [r3, #28]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	055b      	lsls	r3, r3, #21
 80018ac:	4013      	ands	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b2:	2317      	movs	r3, #23
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	4b62      	ldr	r3, [pc, #392]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	d11a      	bne.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c6:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018c8:	4a5e      	ldr	r2, [pc, #376]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	0049      	lsls	r1, r1, #1
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d4:	f7ff f82e 	bl	8000934 <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	e008      	b.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018de:	f7ff f829 	bl	8000934 <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b64      	cmp	r3, #100	; 0x64
 80018ea:	d901      	bls.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e0a3      	b.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	4b54      	ldr	r3, [pc, #336]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4013      	ands	r3, r2
 80018fa:	d0f0      	beq.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018fc:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80018fe:	6a1a      	ldr	r2, [r3, #32]
 8001900:	23c0      	movs	r3, #192	; 0xc0
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d034      	beq.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	23c0      	movs	r3, #192	; 0xc0
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	401a      	ands	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	429a      	cmp	r2, r3
 800191c:	d02c      	beq.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800191e:	4b48      	ldr	r3, [pc, #288]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a49      	ldr	r2, [pc, #292]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001928:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800192a:	4a45      	ldr	r2, [pc, #276]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800192c:	6a12      	ldr	r2, [r2, #32]
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	0249      	lsls	r1, r1, #9
 8001932:	430a      	orrs	r2, r1
 8001934:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001936:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001938:	4a41      	ldr	r2, [pc, #260]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800193a:	6a12      	ldr	r2, [r2, #32]
 800193c:	4943      	ldr	r1, [pc, #268]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800193e:	400a      	ands	r2, r1
 8001940:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001942:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2201      	movs	r2, #1
 800194c:	4013      	ands	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7fe fff0 	bl	8000934 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001958:	e009      	b.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7fe ffeb 	bl	8000934 <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4a3a      	ldr	r2, [pc, #232]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e064      	b.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196e:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	2202      	movs	r2, #2
 8001974:	4013      	ands	r3, r2
 8001976:	d0f0      	beq.n	800195a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001978:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800197a:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4932      	ldr	r1, [pc, #200]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001980:	4019      	ands	r1, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	430b      	orrs	r3, r1
 8001988:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800198a:	2317      	movs	r3, #23
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001996:	4a2a      	ldr	r2, [pc, #168]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001998:	69d2      	ldr	r2, [r2, #28]
 800199a:	492e      	ldr	r1, [pc, #184]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800199c:	400a      	ands	r2, r1
 800199e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4013      	ands	r3, r2
 80019a8:	d009      	beq.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019aa:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80019ac:	4b24      	ldr	r3, [pc, #144]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	2103      	movs	r1, #3
 80019b2:	438b      	bics	r3, r1
 80019b4:	0019      	movs	r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	430b      	orrs	r3, r1
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d008      	beq.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019c8:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4922      	ldr	r1, [pc, #136]	; (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80019d0:	4019      	ands	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	430b      	orrs	r3, r1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	02db      	lsls	r3, r3, #11
 80019e2:	4013      	ands	r3, r2
 80019e4:	d008      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019e6:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	491b      	ldr	r1, [pc, #108]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ee:	4019      	ands	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	430b      	orrs	r3, r1
 80019f6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2220      	movs	r2, #32
 80019fe:	4013      	ands	r3, r2
 8001a00:	d009      	beq.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a02:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	2110      	movs	r1, #16
 8001a0a:	438b      	bics	r3, r1
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	430b      	orrs	r3, r1
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d009      	beq.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	2140      	movs	r1, #64	; 0x40
 8001a2a:	438b      	bics	r3, r1
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	430b      	orrs	r3, r1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b006      	add	sp, #24
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40007000 	.word	0x40007000
 8001a48:	fffffcff 	.word	0xfffffcff
 8001a4c:	fffeffff 	.word	0xfffeffff
 8001a50:	00001388 	.word	0x00001388
 8001a54:	efffffff 	.word	0xefffffff
 8001a58:	fffcffff 	.word	0xfffcffff
 8001a5c:	fff3ffff 	.word	0xfff3ffff

08001a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e044      	b.n	8001afc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2274      	movs	r2, #116	; 0x74
 8001a7e:	2100      	movs	r1, #0
 8001a80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7fe fe55 	bl	8000734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2224      	movs	r2, #36	; 0x24
 8001a8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	438a      	bics	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 f830 	bl	8001b08 <UART_SetConfig>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e024      	b.n	8001afc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 fa09 	bl	8001ed4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	6852      	ldr	r2, [r2, #4]
 8001acc:	490d      	ldr	r1, [pc, #52]	; (8001b04 <HAL_UART_Init+0xa4>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	6892      	ldr	r2, [r2, #8]
 8001adc:	212a      	movs	r1, #42	; 0x2a
 8001ade:	438a      	bics	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	0018      	movs	r0, r3
 8001af6:	f000 fa99 	bl	800202c <UART_CheckIdleState>
 8001afa:	0003      	movs	r3, r0
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	ffffb7ff 	.word	0xffffb7ff

08001b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b10:	231e      	movs	r3, #30
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	49bc      	ldr	r1, [pc, #752]	; (8001e2c <UART_SetConfig+0x324>)
 8001b3c:	4011      	ands	r1, r2
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	6852      	ldr	r2, [r2, #4]
 8001b4e:	49b8      	ldr	r1, [pc, #736]	; (8001e30 <UART_SetConfig+0x328>)
 8001b50:	4011      	ands	r1, r2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68d2      	ldr	r2, [r2, #12]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	6892      	ldr	r2, [r2, #8]
 8001b74:	49af      	ldr	r1, [pc, #700]	; (8001e34 <UART_SetConfig+0x32c>)
 8001b76:	4011      	ands	r1, r2
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4aad      	ldr	r2, [pc, #692]	; (8001e38 <UART_SetConfig+0x330>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d125      	bne.n	8001bd4 <UART_SetConfig+0xcc>
 8001b88:	4bac      	ldr	r3, [pc, #688]	; (8001e3c <UART_SetConfig+0x334>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d00f      	beq.n	8001bb4 <UART_SetConfig+0xac>
 8001b94:	d304      	bcc.n	8001ba0 <UART_SetConfig+0x98>
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d011      	beq.n	8001bbe <UART_SetConfig+0xb6>
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d005      	beq.n	8001baa <UART_SetConfig+0xa2>
 8001b9e:	e013      	b.n	8001bc8 <UART_SetConfig+0xc0>
 8001ba0:	231f      	movs	r3, #31
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	e0ba      	b.n	8001d20 <UART_SetConfig+0x218>
 8001baa:	231f      	movs	r3, #31
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	2202      	movs	r2, #2
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	e0b5      	b.n	8001d20 <UART_SetConfig+0x218>
 8001bb4:	231f      	movs	r3, #31
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	2204      	movs	r2, #4
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e0b0      	b.n	8001d20 <UART_SetConfig+0x218>
 8001bbe:	231f      	movs	r3, #31
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e0ab      	b.n	8001d20 <UART_SetConfig+0x218>
 8001bc8:	231f      	movs	r3, #31
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	2210      	movs	r2, #16
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	e0a5      	b.n	8001d20 <UART_SetConfig+0x218>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a99      	ldr	r2, [pc, #612]	; (8001e40 <UART_SetConfig+0x338>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d132      	bne.n	8001c44 <UART_SetConfig+0x13c>
 8001bde:	4b97      	ldr	r3, [pc, #604]	; (8001e3c <UART_SetConfig+0x334>)
 8001be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001be2:	23c0      	movs	r3, #192	; 0xc0
 8001be4:	029b      	lsls	r3, r3, #10
 8001be6:	4013      	ands	r3, r2
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	0252      	lsls	r2, r2, #9
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d019      	beq.n	8001c24 <UART_SetConfig+0x11c>
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	0252      	lsls	r2, r2, #9
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d802      	bhi.n	8001bfe <UART_SetConfig+0xf6>
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d009      	beq.n	8001c10 <UART_SetConfig+0x108>
 8001bfc:	e01c      	b.n	8001c38 <UART_SetConfig+0x130>
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	0292      	lsls	r2, r2, #10
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <UART_SetConfig+0x126>
 8001c06:	22c0      	movs	r2, #192	; 0xc0
 8001c08:	0292      	lsls	r2, r2, #10
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d005      	beq.n	8001c1a <UART_SetConfig+0x112>
 8001c0e:	e013      	b.n	8001c38 <UART_SetConfig+0x130>
 8001c10:	231f      	movs	r3, #31
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	e082      	b.n	8001d20 <UART_SetConfig+0x218>
 8001c1a:	231f      	movs	r3, #31
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	2202      	movs	r2, #2
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e07d      	b.n	8001d20 <UART_SetConfig+0x218>
 8001c24:	231f      	movs	r3, #31
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	2204      	movs	r2, #4
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	e078      	b.n	8001d20 <UART_SetConfig+0x218>
 8001c2e:	231f      	movs	r3, #31
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	2208      	movs	r2, #8
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	e073      	b.n	8001d20 <UART_SetConfig+0x218>
 8001c38:	231f      	movs	r3, #31
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	e06d      	b.n	8001d20 <UART_SetConfig+0x218>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a7e      	ldr	r2, [pc, #504]	; (8001e44 <UART_SetConfig+0x33c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d132      	bne.n	8001cb4 <UART_SetConfig+0x1ac>
 8001c4e:	4b7b      	ldr	r3, [pc, #492]	; (8001e3c <UART_SetConfig+0x334>)
 8001c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c52:	23c0      	movs	r3, #192	; 0xc0
 8001c54:	031b      	lsls	r3, r3, #12
 8001c56:	4013      	ands	r3, r2
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	02d2      	lsls	r2, r2, #11
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d019      	beq.n	8001c94 <UART_SetConfig+0x18c>
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	02d2      	lsls	r2, r2, #11
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d802      	bhi.n	8001c6e <UART_SetConfig+0x166>
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <UART_SetConfig+0x178>
 8001c6c:	e01c      	b.n	8001ca8 <UART_SetConfig+0x1a0>
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	0312      	lsls	r2, r2, #12
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <UART_SetConfig+0x196>
 8001c76:	22c0      	movs	r2, #192	; 0xc0
 8001c78:	0312      	lsls	r2, r2, #12
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d005      	beq.n	8001c8a <UART_SetConfig+0x182>
 8001c7e:	e013      	b.n	8001ca8 <UART_SetConfig+0x1a0>
 8001c80:	231f      	movs	r3, #31
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e04a      	b.n	8001d20 <UART_SetConfig+0x218>
 8001c8a:	231f      	movs	r3, #31
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	2202      	movs	r2, #2
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e045      	b.n	8001d20 <UART_SetConfig+0x218>
 8001c94:	231f      	movs	r3, #31
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2204      	movs	r2, #4
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e040      	b.n	8001d20 <UART_SetConfig+0x218>
 8001c9e:	231f      	movs	r3, #31
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	e03b      	b.n	8001d20 <UART_SetConfig+0x218>
 8001ca8:	231f      	movs	r3, #31
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	2210      	movs	r2, #16
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	e035      	b.n	8001d20 <UART_SetConfig+0x218>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a63      	ldr	r2, [pc, #396]	; (8001e48 <UART_SetConfig+0x340>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d104      	bne.n	8001cc8 <UART_SetConfig+0x1c0>
 8001cbe:	231f      	movs	r3, #31
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e02b      	b.n	8001d20 <UART_SetConfig+0x218>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a5f      	ldr	r2, [pc, #380]	; (8001e4c <UART_SetConfig+0x344>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d104      	bne.n	8001cdc <UART_SetConfig+0x1d4>
 8001cd2:	231f      	movs	r3, #31
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	e021      	b.n	8001d20 <UART_SetConfig+0x218>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a5b      	ldr	r2, [pc, #364]	; (8001e50 <UART_SetConfig+0x348>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d104      	bne.n	8001cf0 <UART_SetConfig+0x1e8>
 8001ce6:	231f      	movs	r3, #31
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e017      	b.n	8001d20 <UART_SetConfig+0x218>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a57      	ldr	r2, [pc, #348]	; (8001e54 <UART_SetConfig+0x34c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d104      	bne.n	8001d04 <UART_SetConfig+0x1fc>
 8001cfa:	231f      	movs	r3, #31
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
 8001d02:	e00d      	b.n	8001d20 <UART_SetConfig+0x218>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a53      	ldr	r2, [pc, #332]	; (8001e58 <UART_SetConfig+0x350>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d104      	bne.n	8001d18 <UART_SetConfig+0x210>
 8001d0e:	231f      	movs	r3, #31
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	e003      	b.n	8001d20 <UART_SetConfig+0x218>
 8001d18:	231f      	movs	r3, #31
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d15f      	bne.n	8001dec <UART_SetConfig+0x2e4>
  {
    switch (clocksource)
 8001d2c:	231f      	movs	r3, #31
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d00d      	beq.n	8001d52 <UART_SetConfig+0x24a>
 8001d36:	dc02      	bgt.n	8001d3e <UART_SetConfig+0x236>
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <UART_SetConfig+0x240>
 8001d3c:	e015      	b.n	8001d6a <UART_SetConfig+0x262>
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d00a      	beq.n	8001d58 <UART_SetConfig+0x250>
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d00d      	beq.n	8001d62 <UART_SetConfig+0x25a>
 8001d46:	e010      	b.n	8001d6a <UART_SetConfig+0x262>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d48:	f7ff fd76 	bl	8001838 <HAL_RCC_GetPCLK1Freq>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	61bb      	str	r3, [r7, #24]
        break;
 8001d50:	e012      	b.n	8001d78 <UART_SetConfig+0x270>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d52:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <UART_SetConfig+0x354>)
 8001d54:	61bb      	str	r3, [r7, #24]
        break;
 8001d56:	e00f      	b.n	8001d78 <UART_SetConfig+0x270>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d58:	f7ff fce6 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	61bb      	str	r3, [r7, #24]
        break;
 8001d60:	e00a      	b.n	8001d78 <UART_SetConfig+0x270>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	61bb      	str	r3, [r7, #24]
        break;
 8001d68:	e006      	b.n	8001d78 <UART_SetConfig+0x270>
      default:
        pclk = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001d6e:	231e      	movs	r3, #30
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
        break;
 8001d76:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d100      	bne.n	8001d80 <UART_SetConfig+0x278>
 8001d7e:	e099      	b.n	8001eb4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	005a      	lsls	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	18d2      	adds	r2, r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	0019      	movs	r1, r3
 8001d92:	0010      	movs	r0, r2
 8001d94:	f7fe f9b6 	bl	8000104 <__udivsi3>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d91e      	bls.n	8001de2 <UART_SetConfig+0x2da>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4a2e      	ldr	r2, [pc, #184]	; (8001e60 <UART_SetConfig+0x358>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d81a      	bhi.n	8001de2 <UART_SetConfig+0x2da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	230e      	movs	r3, #14
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	210f      	movs	r1, #15
 8001db6:	438a      	bics	r2, r1
 8001db8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	b299      	uxth	r1, r3
 8001dc6:	230e      	movs	r3, #14
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	220e      	movs	r2, #14
 8001dcc:	18ba      	adds	r2, r7, r2
 8001dce:	8812      	ldrh	r2, [r2, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	220e      	movs	r2, #14
 8001dda:	18ba      	adds	r2, r7, r2
 8001ddc:	8812      	ldrh	r2, [r2, #0]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	e068      	b.n	8001eb4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8001de2:	231e      	movs	r3, #30
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e063      	b.n	8001eb4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001dec:	231f      	movs	r3, #31
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d00d      	beq.n	8001e12 <UART_SetConfig+0x30a>
 8001df6:	dc02      	bgt.n	8001dfe <UART_SetConfig+0x2f6>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <UART_SetConfig+0x300>
 8001dfc:	e032      	b.n	8001e64 <UART_SetConfig+0x35c>
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d00a      	beq.n	8001e18 <UART_SetConfig+0x310>
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d00d      	beq.n	8001e22 <UART_SetConfig+0x31a>
 8001e06:	e02d      	b.n	8001e64 <UART_SetConfig+0x35c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e08:	f7ff fd16 	bl	8001838 <HAL_RCC_GetPCLK1Freq>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	61bb      	str	r3, [r7, #24]
        break;
 8001e10:	e02f      	b.n	8001e72 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <UART_SetConfig+0x354>)
 8001e14:	61bb      	str	r3, [r7, #24]
        break;
 8001e16:	e02c      	b.n	8001e72 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e18:	f7ff fc86 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	61bb      	str	r3, [r7, #24]
        break;
 8001e20:	e027      	b.n	8001e72 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	61bb      	str	r3, [r7, #24]
        break;
 8001e28:	e023      	b.n	8001e72 <UART_SetConfig+0x36a>
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	efff69f3 	.word	0xefff69f3
 8001e30:	ffffcfff 	.word	0xffffcfff
 8001e34:	fffff4ff 	.word	0xfffff4ff
 8001e38:	40013800 	.word	0x40013800
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40004400 	.word	0x40004400
 8001e44:	40004800 	.word	0x40004800
 8001e48:	40004c00 	.word	0x40004c00
 8001e4c:	40005000 	.word	0x40005000
 8001e50:	40011400 	.word	0x40011400
 8001e54:	40011800 	.word	0x40011800
 8001e58:	40011c00 	.word	0x40011c00
 8001e5c:	007a1200 	.word	0x007a1200
 8001e60:	0000ffff 	.word	0x0000ffff
      default:
        pclk = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e68:	231e      	movs	r3, #30
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
        break;
 8001e70:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01d      	beq.n	8001eb4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	085a      	lsrs	r2, r3, #1
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	18d2      	adds	r2, r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	0019      	movs	r1, r3
 8001e88:	0010      	movs	r0, r2
 8001e8a:	f7fe f93b 	bl	8000104 <__udivsi3>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	d908      	bls.n	8001eac <UART_SetConfig+0x3a4>
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <UART_SetConfig+0x3c8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d804      	bhi.n	8001eac <UART_SetConfig+0x3a4>
      {
        huart->Instance->BRR = usartdiv;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	e003      	b.n	8001eb4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8001eac:	231e      	movs	r3, #30
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001ec0:	231e      	movs	r3, #30
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	781b      	ldrb	r3, [r3, #0]
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b008      	add	sp, #32
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	0000ffff 	.word	0x0000ffff

08001ed4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d00a      	beq.n	8001efc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	6852      	ldr	r2, [r2, #4]
 8001ef0:	4945      	ldr	r1, [pc, #276]	; (8002008 <UART_AdvFeatureConfig+0x134>)
 8001ef2:	4011      	ands	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	2202      	movs	r2, #2
 8001f02:	4013      	ands	r3, r2
 8001f04:	d00a      	beq.n	8001f1c <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	6852      	ldr	r2, [r2, #4]
 8001f10:	493e      	ldr	r1, [pc, #248]	; (800200c <UART_AdvFeatureConfig+0x138>)
 8001f12:	4011      	ands	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	2204      	movs	r2, #4
 8001f22:	4013      	ands	r3, r2
 8001f24:	d00a      	beq.n	8001f3c <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	6852      	ldr	r2, [r2, #4]
 8001f30:	4937      	ldr	r1, [pc, #220]	; (8002010 <UART_AdvFeatureConfig+0x13c>)
 8001f32:	4011      	ands	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	2208      	movs	r2, #8
 8001f42:	4013      	ands	r3, r2
 8001f44:	d00a      	beq.n	8001f5c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	6852      	ldr	r2, [r2, #4]
 8001f50:	4930      	ldr	r1, [pc, #192]	; (8002014 <UART_AdvFeatureConfig+0x140>)
 8001f52:	4011      	ands	r1, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	2210      	movs	r2, #16
 8001f62:	4013      	ands	r3, r2
 8001f64:	d00a      	beq.n	8001f7c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	6892      	ldr	r2, [r2, #8]
 8001f70:	4929      	ldr	r1, [pc, #164]	; (8002018 <UART_AdvFeatureConfig+0x144>)
 8001f72:	4011      	ands	r1, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	2220      	movs	r2, #32
 8001f82:	4013      	ands	r3, r2
 8001f84:	d00a      	beq.n	8001f9c <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	6892      	ldr	r2, [r2, #8]
 8001f90:	4922      	ldr	r1, [pc, #136]	; (800201c <UART_AdvFeatureConfig+0x148>)
 8001f92:	4011      	ands	r1, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	2240      	movs	r2, #64	; 0x40
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d01b      	beq.n	8001fde <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	6852      	ldr	r2, [r2, #4]
 8001fb0:	491b      	ldr	r1, [pc, #108]	; (8002020 <UART_AdvFeatureConfig+0x14c>)
 8001fb2:	4011      	ands	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	035b      	lsls	r3, r3, #13
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d10a      	bne.n	8001fde <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	6852      	ldr	r2, [r2, #4]
 8001fd2:	4914      	ldr	r1, [pc, #80]	; (8002024 <UART_AdvFeatureConfig+0x150>)
 8001fd4:	4011      	ands	r1, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d00a      	beq.n	8001ffe <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	6852      	ldr	r2, [r2, #4]
 8001ff2:	490d      	ldr	r1, [pc, #52]	; (8002028 <UART_AdvFeatureConfig+0x154>)
 8001ff4:	4011      	ands	r1, r2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
  }
}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b002      	add	sp, #8
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	fffdffff 	.word	0xfffdffff
 800200c:	fffeffff 	.word	0xfffeffff
 8002010:	fffbffff 	.word	0xfffbffff
 8002014:	ffff7fff 	.word	0xffff7fff
 8002018:	ffffefff 	.word	0xffffefff
 800201c:	ffffdfff 	.word	0xffffdfff
 8002020:	ffefffff 	.word	0xffefffff
 8002024:	ff9fffff 	.word	0xff9fffff
 8002028:	fff7ffff 	.word	0xfff7ffff

0800202c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af02      	add	r7, sp, #8
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	2100      	movs	r1, #0
 800203a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800203c:	f7fe fc7a 	bl	8000934 <HAL_GetTick>
 8002040:	0003      	movs	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2208      	movs	r2, #8
 800204c:	4013      	ands	r3, r2
 800204e:	2b08      	cmp	r3, #8
 8002050:	d10d      	bne.n	800206e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	0399      	lsls	r1, r3, #14
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <UART_CheckIdleState+0x90>)
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	0013      	movs	r3, r2
 8002060:	2200      	movs	r2, #0
 8002062:	f000 f82d 	bl	80020c0 <UART_WaitOnFlagUntilTimeout>
 8002066:	1e03      	subs	r3, r0, #0
 8002068:	d001      	beq.n	800206e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e022      	b.n	80020b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2204      	movs	r2, #4
 8002076:	4013      	ands	r3, r2
 8002078:	2b04      	cmp	r3, #4
 800207a:	d10d      	bne.n	8002098 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	03d9      	lsls	r1, r3, #15
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <UART_CheckIdleState+0x90>)
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	0013      	movs	r3, r2
 800208a:	2200      	movs	r2, #0
 800208c:	f000 f818 	bl	80020c0 <UART_WaitOnFlagUntilTimeout>
 8002090:	1e03      	subs	r3, r0, #0
 8002092:	d001      	beq.n	8002098 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e00d      	b.n	80020b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2220      	movs	r2, #32
 80020a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2274      	movs	r2, #116	; 0x74
 80020ae:	2100      	movs	r1, #0
 80020b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b004      	add	sp, #16
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	01ffffff 	.word	0x01ffffff

080020c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b094      	sub	sp, #80	; 0x50
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020d0:	e09b      	b.n	800220a <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d4:	3301      	adds	r3, #1
 80020d6:	d100      	bne.n	80020da <UART_WaitOnFlagUntilTimeout+0x1a>
 80020d8:	e097      	b.n	800220a <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020da:	f7fe fc2b 	bl	8000934 <HAL_GetTick>
 80020de:	0002      	movs	r2, r0
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	1ad2      	subs	r2, r2, r3
 80020e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d802      	bhi.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80020ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d139      	bne.n	8002164 <UART_WaitOnFlagUntilTimeout+0xa4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020f0:	f3ef 8310 	mrs	r3, PRIMASK
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020f8:	647b      	str	r3, [r7, #68]	; 0x44
 80020fa:	2301      	movs	r3, #1
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	f383 8810 	msr	PRIMASK, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	4949      	ldr	r1, [pc, #292]	; (8002234 <UART_WaitOnFlagUntilTimeout+0x174>)
 8002110:	400a      	ands	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
 8002118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211a:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800211e:	f3ef 8310 	mrs	r3, PRIMASK
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002126:	643b      	str	r3, [r7, #64]	; 0x40
 8002128:	2301      	movs	r3, #1
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800212c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212e:	f383 8810 	msr	PRIMASK, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	6892      	ldr	r2, [r2, #8]
 800213c:	2101      	movs	r1, #1
 800213e:	438a      	bics	r2, r1
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002148:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2220      	movs	r2, #32
 8002150:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2220      	movs	r2, #32
 8002156:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2274      	movs	r2, #116	; 0x74
 800215c:	2100      	movs	r1, #0
 800215e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e063      	b.n	800222c <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2204      	movs	r2, #4
 800216c:	4013      	ands	r3, r2
 800216e:	d04c      	beq.n	800220a <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	401a      	ands	r2, r3
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	429a      	cmp	r2, r3
 8002182:	d142      	bne.n	800220a <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	0112      	lsls	r2, r2, #4
 800218c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218e:	f3ef 8310 	mrs	r3, PRIMASK
 8002192:	613b      	str	r3, [r7, #16]
  return(result);
 8002194:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002198:	2301      	movs	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f383 8810 	msr	PRIMASK, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	4921      	ldr	r1, [pc, #132]	; (8002234 <UART_WaitOnFlagUntilTimeout+0x174>)
 80021ae:	400a      	ands	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021bc:	f3ef 8310 	mrs	r3, PRIMASK
 80021c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80021c2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80021c6:	2301      	movs	r3, #1
 80021c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	f383 8810 	msr	PRIMASK, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	6892      	ldr	r2, [r2, #8]
 80021da:	2101      	movs	r1, #1
 80021dc:	438a      	bics	r2, r1
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2220      	movs	r2, #32
 80021ee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2220      	movs	r2, #32
 80021f4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	2120      	movs	r1, #32
 80021fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2274      	movs	r2, #116	; 0x74
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e010      	b.n	800222c <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	425a      	negs	r2, r3
 800221a:	4153      	adcs	r3, r2
 800221c:	b2db      	uxtb	r3, r3
 800221e:	001a      	movs	r2, r3
 8002220:	1dfb      	adds	r3, r7, #7
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d100      	bne.n	800222a <UART_WaitOnFlagUntilTimeout+0x16a>
 8002228:	e753      	b.n	80020d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b014      	add	sp, #80	; 0x50
 8002232:	bd80      	pop	{r7, pc}
 8002234:	fffffe5f 	.word	0xfffffe5f

08002238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002238:	480d      	ldr	r0, [pc, #52]	; (8002270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800223a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800223c:	480d      	ldr	r0, [pc, #52]	; (8002274 <LoopForever+0x6>)
  ldr r1, =_edata
 800223e:	490e      	ldr	r1, [pc, #56]	; (8002278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <LoopForever+0xe>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002244:	e002      	b.n	800224c <LoopCopyDataInit>

08002246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224a:	3304      	adds	r3, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800224c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002250:	d3f9      	bcc.n	8002246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002254:	4c0b      	ldr	r4, [pc, #44]	; (8002284 <LoopForever+0x16>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002258:	e001      	b.n	800225e <LoopFillZerobss>

0800225a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800225c:	3204      	adds	r2, #4

0800225e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002260:	d3fb      	bcc.n	800225a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002262:	f7fe fb07 	bl	8000874 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002266:	f000 f811 	bl	800228c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800226a:	f7fd ffd7 	bl	800021c <main>

0800226e <LoopForever>:

LoopForever:
    b LoopForever
 800226e:	e7fe      	b.n	800226e <LoopForever>
  ldr   r0, =_estack
 8002270:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002278:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800227c:	0800233c 	.word	0x0800233c
  ldr r2, =_sbss
 8002280:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002284:	200000b4 	.word	0x200000b4

08002288 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC1_COMP_IRQHandler>
	...

0800228c <__libc_init_array>:
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	2600      	movs	r6, #0
 8002290:	4d0c      	ldr	r5, [pc, #48]	; (80022c4 <__libc_init_array+0x38>)
 8002292:	4c0d      	ldr	r4, [pc, #52]	; (80022c8 <__libc_init_array+0x3c>)
 8002294:	1b64      	subs	r4, r4, r5
 8002296:	10a4      	asrs	r4, r4, #2
 8002298:	42a6      	cmp	r6, r4
 800229a:	d109      	bne.n	80022b0 <__libc_init_array+0x24>
 800229c:	2600      	movs	r6, #0
 800229e:	f000 f821 	bl	80022e4 <_init>
 80022a2:	4d0a      	ldr	r5, [pc, #40]	; (80022cc <__libc_init_array+0x40>)
 80022a4:	4c0a      	ldr	r4, [pc, #40]	; (80022d0 <__libc_init_array+0x44>)
 80022a6:	1b64      	subs	r4, r4, r5
 80022a8:	10a4      	asrs	r4, r4, #2
 80022aa:	42a6      	cmp	r6, r4
 80022ac:	d105      	bne.n	80022ba <__libc_init_array+0x2e>
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	00b3      	lsls	r3, r6, #2
 80022b2:	58eb      	ldr	r3, [r5, r3]
 80022b4:	4798      	blx	r3
 80022b6:	3601      	adds	r6, #1
 80022b8:	e7ee      	b.n	8002298 <__libc_init_array+0xc>
 80022ba:	00b3      	lsls	r3, r6, #2
 80022bc:	58eb      	ldr	r3, [r5, r3]
 80022be:	4798      	blx	r3
 80022c0:	3601      	adds	r6, #1
 80022c2:	e7f2      	b.n	80022aa <__libc_init_array+0x1e>
 80022c4:	08002334 	.word	0x08002334
 80022c8:	08002334 	.word	0x08002334
 80022cc:	08002334 	.word	0x08002334
 80022d0:	08002338 	.word	0x08002338

080022d4 <memset>:
 80022d4:	0003      	movs	r3, r0
 80022d6:	1882      	adds	r2, r0, r2
 80022d8:	4293      	cmp	r3, r2
 80022da:	d100      	bne.n	80022de <memset+0xa>
 80022dc:	4770      	bx	lr
 80022de:	7019      	strb	r1, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	e7f9      	b.n	80022d8 <memset+0x4>

080022e4 <_init>:
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ea:	bc08      	pop	{r3}
 80022ec:	469e      	mov	lr, r3
 80022ee:	4770      	bx	lr

080022f0 <_fini>:
 80022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f6:	bc08      	pop	{r3}
 80022f8:	469e      	mov	lr, r3
 80022fa:	4770      	bx	lr
